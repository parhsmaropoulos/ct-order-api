[{"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\App.js":"1","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Common\\PrivateRoute.js":"2","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\MainPage.js":"3","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Choices\\SingleChoicePage.js":"4","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\NotUsing\\users\\AllUsersPage.js":"5","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Logging\\SnackBars\\InfoSnackbar.js":"6","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\userReducer.js":"7","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\comments.js":"8","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\snackbar.js":"9","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\items.js":"10","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrderProductsRow.js":"11","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateItemForm.js":"12","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\LogRegModal.js":"13","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Layout\\Header.js":"14","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Order\\OrderMainPage.js":"15","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserAddress.js":"16","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\lib.js":"17","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\EditAddressModal.js":"18","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserRatings.js":"19","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Order\\PreCompleteOrderPage.js":"20","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\AdminMainPage.js":"21","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\ItemsPage.js":"22","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Comments\\AllComents.js":"23","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\productReducer.js":"24","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Ingredients\\IngredientsComponent.js":"25","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\utils\\axiosHeaders.js":"26","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\CommentsCatalog.js":"27","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\OrderItemModal.js":"28","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\adminReducer.js":"29","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrderUserDetailsRow.js":"30","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrdersCatalog.js":"31","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Common\\PrintComponent.js":"32","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\orders.js":"33","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\InnerSidebarCatalog.js":"34","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\firebase\\AuthProvider.js":"35","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Ingredients\\SingleIngredientPage.js":"36","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\uiReducer.js":"37","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\IngredientsCatalog.js":"38","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateForm.js":"39","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateCategoryForm.js":"40","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserOrders.js":"41"},{"size":5780,"mtime":1629191469912,"results":"42","hashOfConfig":"43"},{"size":614,"mtime":1628628428516,"results":"44","hashOfConfig":"43"},{"size":7471,"mtime":1628878373658,"results":"45","hashOfConfig":"43"},{"size":6421,"mtime":1628878374042,"results":"46","hashOfConfig":"43"},{"size":402,"mtime":1620130760054,"results":"47","hashOfConfig":"43"},{"size":1627,"mtime":1618597043608,"results":"48","hashOfConfig":"43"},{"size":2837,"mtime":1628928885493,"results":"49","hashOfConfig":"43"},{"size":2553,"mtime":1627675395706,"results":"50","hashOfConfig":"43"},{"size":956,"mtime":1620130056947,"results":"51","hashOfConfig":"43"},{"size":14758,"mtime":1628784095231,"results":"52","hashOfConfig":"43"},{"size":3867,"mtime":1629191566910,"results":"53","hashOfConfig":"43"},{"size":15534,"mtime":1628878373266,"results":"54","hashOfConfig":"43"},{"size":9671,"mtime":1629027738922,"results":"55","hashOfConfig":"43"},{"size":6603,"mtime":1628927592442,"results":"56","hashOfConfig":"43"},{"size":28571,"mtime":1628928017674,"results":"57","hashOfConfig":"43"},{"size":9863,"mtime":1628932299170,"results":"58","hashOfConfig":"43"},{"size":4830,"mtime":1629053434047,"results":"59","hashOfConfig":"43"},{"size":7695,"mtime":1628931520891,"results":"60","hashOfConfig":"43"},{"size":1778,"mtime":1628932799139,"results":"61","hashOfConfig":"43"},{"size":22387,"mtime":1629192086717,"results":"62","hashOfConfig":"43"},{"size":4935,"mtime":1629053761090,"results":"63","hashOfConfig":"43"},{"size":2446,"mtime":1628878374196,"results":"64","hashOfConfig":"43"},{"size":3719,"mtime":1621085057851,"results":"65","hashOfConfig":"43"},{"size":3930,"mtime":1628878374602,"results":"66","hashOfConfig":"43"},{"size":4207,"mtime":1628878374120,"results":"67","hashOfConfig":"43"},{"size":294,"mtime":1628785969703,"results":"68","hashOfConfig":"43"},{"size":5459,"mtime":1621086833593,"results":"69","hashOfConfig":"43"},{"size":24636,"mtime":1628878372814,"results":"70","hashOfConfig":"43"},{"size":4778,"mtime":1629028356331,"results":"71","hashOfConfig":"43"},{"size":6153,"mtime":1629191739184,"results":"72","hashOfConfig":"43"},{"size":4585,"mtime":1629028611801,"results":"73","hashOfConfig":"43"},{"size":7591,"mtime":1629055076853,"results":"74","hashOfConfig":"43"},{"size":5745,"mtime":1629192128985,"results":"75","hashOfConfig":"43"},{"size":2457,"mtime":1621764484696,"results":"76","hashOfConfig":"43"},{"size":483,"mtime":1628708434806,"results":"77","hashOfConfig":"43"},{"size":4939,"mtime":1628878374178,"results":"78","hashOfConfig":"43"},{"size":1133,"mtime":1618256485899,"results":"79","hashOfConfig":"43"},{"size":2260,"mtime":1620593233938,"results":"80","hashOfConfig":"43"},{"size":1282,"mtime":1620130596117,"results":"81","hashOfConfig":"43"},{"size":3788,"mtime":1629191470509,"results":"82","hashOfConfig":"43"},{"size":9212,"mtime":1629196737435,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rlr1vo",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"88"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\App.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Common\\PrivateRoute.js",[],["170","171"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\MainPage.js",["172","173"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport \"../../../css/Pages/accountpage.css\";\r\nimport { auth_get_request, auth_put_request } from \"../../../actions/lib\";\r\n\r\nimport { Grid, Container } from \"@material-ui/core\";\r\nimport { GET_USER, UPDATE_USER } from \"../../../actions/actions\";\r\n\r\nclass MainPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      name: \"\",\r\n      surname: \"\",\r\n      phone: \"\",\r\n      newPassword: \"\",\r\n      newPassword2: \"\",\r\n      user: {},\r\n    };\r\n    this.onUpdateSubmit = this.onUpdateSubmit.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onChangePasswordSubmit = this.onChangePasswordSubmit.bind(this);\r\n  }\r\n\r\n  static propTypes = {\r\n    userReducer: PropTypes.object.isRequired,\r\n    auth_get_request: PropTypes.func.isRequired,\r\n    auth_put_request: PropTypes.func.isRequired,\r\n\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.userReducer.hasLoaded === false) {\r\n       this.get_user(); \r\n    }else{\r\n      this.setState({\r\n        name: this.props.userReducer.user.name,\r\n        surname: this.props.userReducer.user.surname,\r\n        phone: this.props.userReducer.user.phone,\r\n        email: this.props.userReducer.user.email,\r\n        user: this.props.userReducer.user,\r\n      });\r\n    }\r\n  }\r\n  async get_user(){\r\n    let user = await this.props.auth_get_request(`user/${sessionStorage.getItem(\"userID\")}`,GET_USER)\r\n    this.setState({\r\n      name: this.props.userReducer.user.name,\r\n      surname: this.props.userReducer.user.surname,\r\n      phone: this.props.userReducer.user.phone,\r\n      email: this.props.userReducer.user.email,\r\n      user: this.props.userReducer.user,\r\n    });\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  onChangePasswordSubmit(e) {\r\n    e.preventDefault();\r\n    const data = {\r\n      password: this.state.newPassword,\r\n    };\r\n    this.props.auth_put_request(\"user/0/update_password\",data,UPDATE_USER)\r\n    // this.props.updateUser(data);\r\n  }\r\n\r\n  onUpdateSubmit(e) {\r\n    e.preventDefault();\r\n    const data = {\r\n        name: this.state.name,\r\n        surname: this.state.surname,\r\n        phone: this.state.phone,\r\n    };\r\n    this.props.auth_put_request(\"user/0/update_personal_info\",data,UPDATE_USER)\r\n\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    if (sessionStorage.getItem(\"isAuthenticated\") === \"false\") {\r\n      return <Redirect to=\"/home\" />;\r\n    } else {\r\n      return (\r\n        <Container className=\"accountMainPage\">\r\n          <Grid spacing={3} container>\r\n            <Grid item lg={3} md={3} sm={6} xs={12}>\r\n              <Link className=\"nav-text nav-text-activated\" to=\"/account\">\r\n                Ο λογαριασμός μου\r\n              </Link>\r\n            </Grid>\r\n            <Grid item lg={3} md={3} sm={6} xs={12}>\r\n              <Link className=\"nav-text\" to=\"/account/orders\">\r\n                Οι παραγγελίες μου\r\n              </Link>\r\n            </Grid>\r\n            <Grid item lg={2} md={2} sm={6} xs={12}>\r\n              <Link className=\"nav-text\" to=\"/account/addresses\">\r\n                Διευθύνσεις\r\n              </Link>\r\n            </Grid>\r\n\r\n            <Grid item lg={2} md={2} sm={6} xs={12}>\r\n              <Link className=\"nav-text\" to=\"/account/ratings\">\r\n                Βαθμολογίες\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n          <Row className=\"userProfileRow bodyRow\">\r\n            <div className=\"roundedContainer userProfileContainer\">\r\n              <h4> Change your values</h4>\r\n              <Form onSubmit={this.onUpdateSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"formGridName\">\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                      onChange={this.onChange}\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      value={this.state.name}\r\n                      placeholder=\"Enter Name\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} controlId=\"formGridLastName\">\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <Form.Control\r\n                      onChange={this.onChange}\r\n                      type=\"text\"\r\n                      name=\"surname\"\r\n                      value={this.state.surname}\r\n                      placeholder=\"Enter Last Name\"\r\n                    />\r\n                  </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control\r\n                      onChange={this.onChange}\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      value={this.state.email}\r\n                      placeholder=\"Enter email\"\r\n                      readOnly\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} controlId=\"formGridPhone\">\r\n                    <Form.Label>Phone</Form.Label>\r\n                    <Form.Control\r\n                      type=\"tel\"\r\n                      placeholder=\"Enter phone: 69xxxxxxxx\"\r\n                      name=\"phone\"\r\n                      pattern=\"69[0-9]{8}\"\r\n                      value={this.state.phone}\r\n                      onChange={this.onChange}\r\n                    />\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  Update\r\n                </Button>\r\n              </Form>\r\n              <h4> Change your password</h4>\r\n              <Form onSubmit={this.onChangePasswordSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"formPassword\">\r\n                    <Form.Label>New Password</Form.Label>\r\n                    <Form.Control\r\n                      onChange={this.onChange}\r\n                      type=\"text\"\r\n                      name=\"newPassword\"\r\n                      // value={this.state.newPassword}\r\n                      placeholder=\"Enter Password\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} controlId=\"formPassword2\">\r\n                    <Form.Label>Repeat Password</Form.Label>\r\n                    <Form.Control\r\n                      onChange={this.onChange}\r\n                      type=\"text\"\r\n                      name=\"newPassword2\"\r\n                      // value={this.state.newPassword2}\r\n                      placeholder=\"Repeat Password\"\r\n                    />\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  Update\r\n                </Button>\r\n              </Form>\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  console.log(state),\r\n  {\r\n    userReducer: state.userReducer,\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, { auth_get_request, auth_put_request })(MainPage);\r\n","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Choices\\SingleChoicePage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\NotUsing\\users\\AllUsersPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Logging\\SnackBars\\InfoSnackbar.js",[],["174","175"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\userReducer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\comments.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\snackbar.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\items.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrderProductsRow.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateItemForm.js",["176"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\LogRegModal.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Layout\\Header.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Order\\OrderMainPage.js",["177"],"import React, { Component } from \"react\";\r\nimport { Card, Col, ListGroup, Row, ThemeProvider } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../../../css/Pages/orderpage.css\";\r\nimport OrderItemModal from \"../../Modals/OrderItemModal\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Redirect } from \"react-router\";\r\nimport { update_cart } from \"../../../actions/orders\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport { showInfoSnackbar } from \"../../../actions/snackbar\";\r\n// import AlertModal from \"../../MainPanel/Pages/Alert/AlertModal\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  createMuiTheme,\r\n  Drawer,\r\n  Grid,\r\n  Hidden,\r\n  IconButton,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { orange } from \"@material-ui/core/colors\";\r\nimport { auth_get_request } from \"../../../actions/lib\";\r\nimport {\r\n  GET_CATEGORIES,\r\n  GET_CHOICES,\r\n  GET_INGREDIENTS,\r\n  GET_ITEMS,\r\n} from \"../../../actions/actions\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nvar _ = require(\"lodash\");\r\n\r\nconst customTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: orange[500],\r\n    },\r\n  },\r\n});\r\n\r\nclass OrderMainPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addToCart = this.addToCart.bind(this);\r\n    this.removeFromCart = this.removeFromCart.bind(this);\r\n    this.clearCart = this.clearCart.bind(this);\r\n    this.changeCategory = this.changeCategory.bind(this);\r\n    this.showModal = this.showModal.bind(this);\r\n    this.showAlert = this.showAlert.bind(this);\r\n    this.toggleDrawer = this.toggleDrawer.bind(this);\r\n  }\r\n  state = {\r\n    cart: [],\r\n    totalPrice: 0,\r\n    grouped: [],\r\n    selectedCategory: \"1\",\r\n    selectedItem: {},\r\n    itemToUpdate: {},\r\n    showModal: false,\r\n    modalToUpdate: false,\r\n    indexToUpdate: 0,\r\n    pathToImages: \"\",\r\n    showAlert: false,\r\n    alertMessage: \"\",\r\n    continueOrder: false,\r\n    products: [],\r\n    categories: [],\r\n    isReady: false,\r\n    openDrawer: false,\r\n  };\r\n  static propTypes = {\r\n    orderReducer: PropTypes.object.isRequired,\r\n    userReducer: PropTypes.object.isRequired,\r\n    products: PropTypes.array.isRequired,\r\n    categories: PropTypes.array.isRequired,\r\n    isReady: PropTypes.bool.isRequired,\r\n    update_cart: PropTypes.func.isRequired,\r\n    showInfoSnackbar: PropTypes.func.isRequired,\r\n    auth_get_request: PropTypes.func.isRequired,\r\n  };\r\n  changeCategory = (category, drawer) => {\r\n    this.setState({ selectedCategory: category });\r\n    if (drawer) {\r\n      this.setState({ openDrawer: false });\r\n    }\r\n  };\r\n\r\n  continueOrder = () => {\r\n    if (this.state.cart.length > 0) {\r\n      if (sessionStorage.getItem(\"isAuthenticated\") !== \"true\") {\r\n        // this.showAlert(true, \"You have to login first!\");\r\n        this.props.showInfoSnackbar(\"You have to login first!\");\r\n      } else {\r\n        this.setState({\r\n          continueOrder: true,\r\n        });\r\n      }\r\n    } else {\r\n      // return <Alert variant=\"secondary\">Your card is empty!</Alert>;\r\n      this.props.showInfoSnackbar(\"Your cart is empty!\");\r\n    }\r\n  };\r\n\r\n  updateCart = (item, quantity, index) => {\r\n    // console.log(item, quantity);\r\n    const order_item = {\r\n      item: item.item,\r\n      options: item.options,\r\n      comment: item.comment,\r\n      totalPrice: item.item.price * quantity + item.extraPrice * quantity,\r\n      optionAnswers: item.optionAnswers,\r\n      extra_ingredients: item.extra_ingredients,\r\n      quantity: quantity,\r\n    };\r\n    let cart_ = this.state.cart;\r\n    let oldTotalPrice = this.state.totalPrice;\r\n    let newTotalPrice =\r\n      oldTotalPrice - cart_[index].totalPrice + order_item.totalPrice;\r\n    cart_[index] = order_item;\r\n    this.setState({\r\n      cart: cart_,\r\n      totalPrice: newTotalPrice,\r\n    });\r\n    // this.props.update_order(this.state.cart, this.state.totalPrice);\r\n  };\r\n\r\n  addToCart = (item, quantity) => {\r\n    const order_item = {\r\n      item: item.item,\r\n      options: item.options,\r\n      comment: item.comment,\r\n      extraPrice: item.extraPrice,\r\n      totalPrice: item.item.price * quantity + item.extraPrice * quantity,\r\n      optionAnswers: item.optionAnswers,\r\n      extra_ingredients: item.extra_ingredients,\r\n      quantity: quantity,\r\n    };\r\n    this.setState({\r\n      cart: [...this.state.cart, order_item],\r\n      totalPrice: this.state.totalPrice + order_item.totalPrice,\r\n    });\r\n    // this.props.update_order(this.state.cart, this.state.totalPrice);\r\n  };\r\n\r\n  removeFromCart = (index, order_item) => {\r\n    console.log(order_item);\r\n    this.setState({\r\n      cart: [...this.state.cart.filter((item, idex) => idex !== index)],\r\n      totalPrice: this.state.totalPrice - order_item.totalPrice,\r\n    });\r\n    // this.props.update_order(this.state.cart, this.state.totalPrice);\r\n  };\r\n\r\n  clearCart() {\r\n    this.setState({ cart: [], totalPrice: 0 });\r\n    // this.props.update_order(this.state.cart, this.state.totalPrice);\r\n  }\r\n\r\n  showModal = (item, bool, close, index) => {\r\n    let item_ = {};\r\n    let cat_ = \"\";\r\n    if (bool) {\r\n      item_ = item.item;\r\n    } else {\r\n      item_ = item;\r\n    }\r\n    if (close) {\r\n      cat_ = this.state.selectedCategory;\r\n    } else {\r\n      cat_ = item_.category;\r\n    }\r\n    this.setState({\r\n      selectedItem: item_,\r\n      selectedCategory: cat_,\r\n      showModal: !this.state.showModal,\r\n      modalToUpdate: bool,\r\n      indexToUpdate: index,\r\n      itemToUpdate: item,\r\n    });\r\n  };\r\n\r\n  toggleDrawer = (bool) => {\r\n    this.setState({ openDrawer: bool });\r\n  };\r\n\r\n  changeQuantity = (bool, index) => {\r\n    let cur_cart = [...this.state.cart];\r\n    let cur_item = cur_cart[index];\r\n    let price_per_unit = cur_item.totalPrice / cur_item.quantity;\r\n    let cartTotalPrice = this.state.totalPrice;\r\n\r\n    if (bool) {\r\n      cur_item.totalPrice += price_per_unit;\r\n      cur_item.quantity += 1;\r\n      cartTotalPrice += price_per_unit;\r\n    } else {\r\n      cur_item.totalPrice -= price_per_unit;\r\n      cur_item.quantity -= 1;\r\n      cartTotalPrice -= price_per_unit;\r\n    }\r\n    cur_cart[index] = cur_item;\r\n    console.log(cur_item);\r\n    if (cur_item.quantity === 0) {\r\n      cur_item.quantity += 1;\r\n      cur_item.totalPrice += price_per_unit;\r\n      this.removeFromCart(index, cur_item);\r\n    } else {\r\n      this.setState({\r\n        cart: cur_cart,\r\n        totalPrice: cartTotalPrice,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.props.update_cart(this.state.cart, this.state.totalPrice);\r\n  }\r\n  showAlert = (bool, msg) => {\r\n    this.setState({\r\n      showAlert: bool,\r\n      alertMessage: msg,\r\n    });\r\n  };\r\n\r\n  showSearchResults = (e) => {\r\n    let type = e.type;\r\n    // console.log(e.target.value);\r\n    // console.log(e.target.textContent);\r\n    if (type === \"click\" || type === \"keydown\") {\r\n      let name = e.target.textContent;\r\n      if (type === \"keydown\") {\r\n        name = e.target.value;\r\n      }\r\n      let product;\r\n      let found = false;\r\n      for (var i in this.props.products) {\r\n        if (this.props.products[i].name === name) {\r\n          product = this.props.products[i];\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n      if (found)\r\n        this.setState(\r\n          {\r\n            selectedCategory: product.category,\r\n          },\r\n          () => {\r\n            // console.log(this.state.selectedCategory);\r\n          }\r\n        );\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.isReady === false) {\r\n      this.get_items();\r\n      this.get_choices();\r\n      this.get_categories();\r\n      this.get_ingredients();\r\n    }\r\n    if (this.props.orderReducer.products.length > 0) {\r\n      let grouped = _.groupBy(this.props.products, \"category\");\r\n      let category = this.props.categories[0].name;\r\n      if (this.state.searchParam !== \"\") {\r\n        for (var i in this.props.products) {\r\n          if (this.props.products[i].name === this.state.searchParam) {\r\n            category = this.props.products[i].categroy;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.setState({\r\n        selectedCategory: category,\r\n        grouped: grouped,\r\n        cart: this.props.orderReducer.products,\r\n        totalPrice: this.props.orderReducer.totalPrice,\r\n      });\r\n    }\r\n  }\r\n  async get_items() {\r\n    await this.props.auth_get_request(\"products/all\", GET_ITEMS);\r\n  }\r\n  async get_categories() {\r\n    await this.props.auth_get_request(\"product_category/all\", GET_CATEGORIES);\r\n  }\r\n  async get_choices() {\r\n    await this.props.auth_get_request(\"product_choices/all\", GET_CHOICES);\r\n  }\r\n  async get_ingredients() {\r\n    await this.props.auth_get_request(\"ingredients/all\", GET_INGREDIENTS);\r\n  }\r\n\r\n  render() {\r\n    let modal;\r\n    let alertModal;\r\n    if (this.state.showModal) {\r\n      modal = (\r\n        <OrderItemModal\r\n          onClose={() =>\r\n            this.showModal(this.state.selectedItem, false, true, 0)\r\n          }\r\n          show={this.state.showModal}\r\n          item={this.state.selectedItem}\r\n          update={this.state.modalToUpdate}\r\n          updateItem={this.state.itemToUpdate}\r\n          category={\r\n            this.props.categories.filter(\r\n              (cat) => cat.name === this.state.selectedCategory\r\n            )[0]\r\n          }\r\n          onAdd={this.addToCart}\r\n          onUpdate={this.updateCart}\r\n          index={this.state.indexToUpdate}\r\n        />\r\n      );\r\n    }\r\n    if (this.state.continueOrder) {\r\n      return (\r\n        <Redirect to={`/pre_complete/${sessionStorage.getItem(\"userID\")}`} />\r\n      );\r\n    }\r\n    if (!this.props.isReady) {\r\n      return (\r\n        <div className=\"loading-div\">\r\n          <CircularProgress disableShrink />{\" \"}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        // <div id=\"orderMainPageContainer\">\r\n        <Container>\r\n          <ThemeProvider theme={customTheme}>\r\n            <Grid spacing={1} container style={{ minHeight: \"70vh\" }}>\r\n              {alertModal}\r\n              {/* <Row className=\"orderMainPageRow\"> */}\r\n              {/* ############## CATEGORIES ################## */}\r\n              <Hidden smUp>\r\n                <Grid item sm={2} xs={2} spacing={2}>\r\n                  <Button\r\n                    style={{\r\n                      justifyContent: \"left\",\r\n                    }}\r\n                    className=\"menu-categories-list-button\"\r\n                    onClick={() => this.toggleDrawer(true)}\r\n                  >\r\n                    <MenuIcon />\r\n                  </Button>\r\n                  <Drawer\r\n                    anchor={\"left\"}\r\n                    open={this.state.openDrawer}\r\n                    onClose={() => this.toggleDrawer(false)}\r\n                  >\r\n                    {this.props.categories.map((categ, index) => {\r\n                      let selected = false;\r\n                      if (this.state.selectedCategory === categ.ID) {\r\n                        selected = true;\r\n                      }\r\n                      return (\r\n                        <ListGroup.Item\r\n                          key={index}\r\n                          onClick={() => this.changeCategory(categ.ID, true)}\r\n                          active={selected}\r\n                        >\r\n                          {categ.name}\r\n                        </ListGroup.Item>\r\n                      );\r\n                    })}\r\n                  </Drawer>\r\n                </Grid>\r\n              </Hidden>\r\n              <Hidden mdDown>\r\n                <Grid item lg={3} className=\"categoriesListCol\">\r\n                  <div className=\"categoriesList\">\r\n                    <ListGroup className=\"categoriesListGroup\">\r\n                      {this.props.categories.map((categ, index) => {\r\n                        let selected = false;\r\n                        if (this.state.selectedCategory === categ.ID) {\r\n                          selected = true;\r\n                        }\r\n                        return (\r\n                          <ListGroup.Item\r\n                            key={index}\r\n                            onClick={() => this.changeCategory(categ.ID, false)}\r\n                            active={selected}\r\n                          >\r\n                            {categ.name}\r\n                          </ListGroup.Item>\r\n                        );\r\n                      })}\r\n                    </ListGroup>\r\n                  </div>\r\n                </Grid>\r\n              </Hidden>\r\n              {/* ################### PRODUCTS ############### */}\r\n              <Grid\r\n                item\r\n                lg={6}\r\n                md={12}\r\n                sm={10}\r\n                xs={10}\r\n                style={{ width: \"100%\" }}\r\n                className=\"productList\"\r\n              >\r\n                {/* <SearchBar /> */}\r\n                <Autocomplete\r\n                  id=\"search-product\"\r\n                  options={this.props.products}\r\n                  getOptionLabel={(option) => option.name}\r\n                  // disableClearables={false}\r\n                  autoComplete\r\n                  onClose={(e) => this.showSearchResults(e)}\r\n                  renderOption={(option, index) => (\r\n                    <Typography\r\n                      noWrap\r\n                      // onClick={(e) => console.log(e)}\r\n                      key={index}\r\n                    >\r\n                      {option.name}\r\n                    </Typography>\r\n                  )}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Search product\"\r\n                      variant=\"outlined\"\r\n                      InputProps={{ ...params.InputProps, type: \"search\" }}\r\n                    />\r\n                  )}\r\n                />\r\n                <ListGroup variant=\"flush\">\r\n                  {this.props.products.map((item, index) => {\r\n                    if (item.category_id === this.state.selectedCategory) {\r\n                      if (item.available === false) {\r\n                        return (\r\n                          <ListGroup.Item key={index} disabled id={item.name}>\r\n                            <Card border=\"light\">\r\n                              <Row className=\"itemCardRow\">\r\n                                {item.image === \"\" ? (\r\n                                  <Col\r\n                                    sm={4}\r\n                                    className=\"itemCardImageCol\"\r\n                                  ></Col>\r\n                                ) : (\r\n                                  <Col sm={4} className=\"itemCardImageCol\">\r\n                                    <Card.Img\r\n                                      // src={`http:://localhost:8080/assets/images/${item.image}`}\r\n                                      src={`http://localhost:8080/assets/images/${item.image}`}\r\n                                      className=\"itemCardImage\"\r\n                                    ></Card.Img>{\" \"}\r\n                                  </Col>\r\n                                )}\r\n                                <Col sm={8}>\r\n                                  <Card.Body>\r\n                                    <Card.Title className=\"item-unavailable\">\r\n                                      {item.name}\r\n                                    </Card.Title>\r\n                                    <Card.Subtitle className=\"text-muted\">\r\n                                      {/* {item.description} */}\r\n                                      {item.default_ingredientes &&\r\n                                      item.default_ingredientes.length > 0\r\n                                        ? item.default_ingredientes.join()\r\n                                        : item.description}\r\n                                    </Card.Subtitle>\r\n                                    <Card.Text>{item.price} €</Card.Text>\r\n                                  </Card.Body>\r\n                                </Col>\r\n                              </Row>\r\n                            </Card>\r\n                          </ListGroup.Item>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <ListGroup.Item\r\n                            key={index}\r\n                            onClick={() =>\r\n                              this.showModal(item, false, false, 0)\r\n                            }\r\n                            id={item.name}\r\n                          >\r\n                            <Card border=\"light\">\r\n                              <Row className=\"itemCardRow\">\r\n                                <Hidden mdDown>\r\n                                  {item.image === \"\" ? (\r\n                                    <Col\r\n                                      sm={4}\r\n                                      className=\"itemCardImageCol\"\r\n                                    ></Col>\r\n                                  ) : (\r\n                                    <Col sm={4} className=\"itemCardImageCol\">\r\n                                      <Card.Img\r\n                                        src={`http://localhost:8080/assets/images/${item.image}`}\r\n                                        className=\"itemCardImage\"\r\n                                      ></Card.Img>{\" \"}\r\n                                    </Col>\r\n                                  )}\r\n                                </Hidden>\r\n                                <Col sm={8}>\r\n                                  <Card.Body>\r\n                                    <Card.Title>{item.name}</Card.Title>\r\n                                    <Card.Subtitle className=\"text-muted\">\r\n                                      {item.default_ingredients &&\r\n                                      item.default_ingredients.length > 0\r\n                                        ? item.default_ingredients.join()\r\n                                        : item.description}\r\n                                    </Card.Subtitle>\r\n                                    <Card.Text>{item.price} €</Card.Text>\r\n                                  </Card.Body>\r\n                                </Col>\r\n                              </Row>\r\n                            </Card>\r\n                          </ListGroup.Item>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return <span key={index}></span>;\r\n                    }\r\n                  })}\r\n                </ListGroup>\r\n              </Grid>\r\n              {modal}\r\n              {/* ################### CART ############### */}\r\n              <Grid\r\n                item\r\n                lg={3}\r\n                md={12}\r\n                sm={12}\r\n                xs={12}\r\n                style={{ width: \"100%\" }}\r\n                className=\"cart\"\r\n              >\r\n                <div className=\"stickyCard\">\r\n                  <Card>\r\n                    <Card.Body className=\"cardBody\">\r\n                      <Card.Title>Το καλάθι σου</Card.Title>\r\n                      <div className=\"cartList\">\r\n                        {this.state.cart.length > 0 ? (\r\n                          <ListGroup>\r\n                            {this.state.cart.map((order_item, index) => {\r\n                              // console.log(order_item);\r\n                              return (\r\n                                <ListGroup.Item\r\n                                  key={index}\r\n                                  className=\"cardItem\"\r\n                                >\r\n                                  <Card border=\"light\">\r\n                                    <Card.Header\r\n                                      style={{ backgroundColor: \"white\" }}\r\n                                    >\r\n                                      <Row className=\"headerItem\">\r\n                                        <div\r\n                                          onClick={() =>\r\n                                            this.showModal(\r\n                                              order_item,\r\n                                              true,\r\n                                              false,\r\n                                              index\r\n                                            )\r\n                                          }\r\n                                          className=\"cartItemName\"\r\n                                        >\r\n                                          {order_item.item.name}\r\n                                        </div>\r\n                                        <div className=\"cartItemPrice\">\r\n                                          {order_item.totalPrice /\r\n                                            order_item.quantity}{\" \"}\r\n                                          €\r\n                                        </div>\r\n                                      </Row>\r\n                                    </Card.Header>\r\n                                    <Card.Body>\r\n                                      <Row className=\"bodyItem\">\r\n                                        {order_item.optionAnswers.length > 0 ? (\r\n                                          <div className=\"cartItemOptions\">\r\n                                            <p>\r\n                                              {order_item.optionAnswers.join() +\r\n                                                `,${order_item.comment}`}\r\n                                            </p>\r\n                                          </div>\r\n                                        ) : (\r\n                                          <div className=\"cartItemOptions\">\r\n                                            {order_item.comment}\r\n                                          </div>\r\n                                        )}\r\n                                        <ul className=\"ingredientCartList\">\r\n                                          {order_item.extra_ingredients.length >\r\n                                          0 ? (\r\n                                            order_item.extra_ingredients.map(\r\n                                              (ingredient, index) => {\r\n                                                return (\r\n                                                  <li\r\n                                                    key={index}\r\n                                                    style={{\r\n                                                      textAlign: \"left\",\r\n                                                    }}\r\n                                                  >\r\n                                                    + {ingredient}\r\n                                                  </li>\r\n                                                );\r\n                                              }\r\n                                            )\r\n                                          ) : (\r\n                                            <span></span>\r\n                                          )}\r\n                                        </ul>\r\n                                      </Row>\r\n                                    </Card.Body>\r\n                                    <Card.Footer\r\n                                      style={{ backgroundColor: \"white\" }}\r\n                                    >\r\n                                      <Grid direction=\"row\" container>\r\n                                        <Grid item xs={9}>\r\n                                          <IconButton\r\n                                            className=\"minPlusButton\"\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            aria-label=\"remove\"\r\n                                            onClick={() =>\r\n                                              this.changeQuantity(false, index)\r\n                                            }\r\n                                          >\r\n                                            <RemoveIcon fontSize=\"small\" />\r\n                                          </IconButton>\r\n                                          <span>{order_item.quantity}</span>\r\n                                          <IconButton\r\n                                            className=\"minPlusButton\"\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            aria-label=\"add\"\r\n                                            onClick={() =>\r\n                                              this.changeQuantity(true, index)\r\n                                            }\r\n                                          >\r\n                                            <AddIcon fontSize=\"small\" />\r\n                                          </IconButton>\r\n                                        </Grid>\r\n                                        <Grid item xs={3}>\r\n                                          {/* <div className=\"removeButtonCol\"> */}\r\n                                          <IconButton\r\n                                            className=\"removeButton minPlusButton\"\r\n                                            color=\"secondary\"\r\n                                            variant=\"contained\"\r\n                                            aria-label=\"remove\"\r\n                                            onClick={() =>\r\n                                              this.removeFromCart(\r\n                                                index,\r\n                                                order_item\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <ClearIcon fontSize=\"small\" />\r\n                                          </IconButton>\r\n                                          {/* </div> */}\r\n                                        </Grid>\r\n                                      </Grid>\r\n                                    </Card.Footer>\r\n                                  </Card>\r\n                                </ListGroup.Item>\r\n                              );\r\n                            })}\r\n                          </ListGroup>\r\n                        ) : (\r\n                          <Card.Text>Το καλάθι είναι άδειο</Card.Text>\r\n                        )}\r\n                      </div>\r\n                      <hr />\r\n                      <Row>\r\n                        <Col>\r\n                          <Card.Text>Σύνολο</Card.Text>\r\n                        </Col>\r\n                        <Col>\r\n                          <Card.Text> {this.state.totalPrice} €</Card.Text>\r\n                        </Col>\r\n                      </Row>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\"cartButton\"\r\n                        onClick={this.continueOrder}\r\n                      >\r\n                        Συνέχεια\r\n                        {/* <Link to=\"/order/pre_complete\">Συνέχεια</Link> */}\r\n                      </Button>\r\n                      <br />\r\n                      <Card.Text\r\n                        style={{\r\n                          textDecoration: \"underline\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={this.clearCart}\r\n                      >\r\n                        Άδειασμα\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </div>\r\n              </Grid>\r\n              {/* </Row> */}\r\n              {/* </div> */}\r\n            </Grid>\r\n          </ThemeProvider>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  console.log(state),\r\n  {\r\n    orderReducer: state.orderReducer,\r\n    products: state.productReducer.products,\r\n    categories: state.productReducer.categories,\r\n    userReducer: state.userReducer,\r\n    isReady: state.productReducer.isReady,\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, {\r\n  update_cart,\r\n  showInfoSnackbar,\r\n  auth_get_request,\r\n})(OrderMainPage);\r\n","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserAddress.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\lib.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\EditAddressModal.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserRatings.js",["178"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Order\\PreCompleteOrderPage.js",["179"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\AdminMainPage.js",["180","181","182"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\ItemsPage.js",["183"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Comments\\AllComents.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\productReducer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Ingredients\\IngredientsComponent.js",["184"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\utils\\axiosHeaders.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\CommentsCatalog.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\OrderItemModal.js",["185"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\adminReducer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrderUserDetailsRow.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrdersCatalog.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Common\\PrintComponent.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\orders.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\InnerSidebarCatalog.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\firebase\\AuthProvider.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Ingredients\\SingleIngredientPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\uiReducer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\IngredientsCatalog.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateForm.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateCategoryForm.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserOrders.js",[],{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":50,"column":9,"nodeType":"192","messageId":"193","endLine":50,"endColumn":13},{"ruleId":"194","severity":1,"message":"195","line":211,"column":21,"nodeType":"196","messageId":"197","endLine":211,"endColumn":22},{"ruleId":"186","replacedBy":"198"},{"ruleId":"188","replacedBy":"199"},{"ruleId":"194","severity":1,"message":"195","line":458,"column":21,"nodeType":"196","messageId":"197","endLine":458,"endColumn":22},{"ruleId":"194","severity":1,"message":"195","line":716,"column":21,"nodeType":"196","messageId":"197","endLine":716,"endColumn":22},{"ruleId":"190","severity":1,"message":"200","line":5,"column":16,"nodeType":"192","messageId":"193","endLine":5,"endColumn":24},{"ruleId":"190","severity":1,"message":"200","line":5,"column":10,"nodeType":"192","messageId":"193","endLine":5,"endColumn":18},{"ruleId":"190","severity":1,"message":"201","line":5,"column":8,"nodeType":"192","messageId":"193","endLine":5,"endColumn":13},{"ruleId":"190","severity":1,"message":"202","line":77,"column":11,"nodeType":"192","messageId":"193","endLine":77,"endColumn":14},{"ruleId":"190","severity":1,"message":"202","line":96,"column":11,"nodeType":"192","messageId":"193","endLine":96,"endColumn":14},{"ruleId":"194","severity":1,"message":"195","line":64,"column":21,"nodeType":"196","messageId":"197","endLine":64,"endColumn":22},{"ruleId":"190","severity":1,"message":"203","line":8,"column":10,"nodeType":"192","messageId":"193","endLine":8,"endColumn":40},{"ruleId":"190","severity":1,"message":"204","line":24,"column":10,"nodeType":"192","messageId":"193","endLine":24,"endColumn":15},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["205"],["206"],"'Redirect' is defined but never used.","'axios' is defined but never used.","'res' is assigned a value but never used.","'change_ingredient_availability' is defined but never used.","'range' is defined but never used.","no-global-assign","no-unsafe-negation"]