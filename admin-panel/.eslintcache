[{"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Layout\\Footer.js":"1","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\App.js":"2","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Layout\\NotFound.js":"3","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\items.js":"4","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\actions.js":"5","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\productReducer.js":"6","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\socket\\index.js":"7","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\index.js":"8","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\snackbar.js":"9","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\orders.js":"10","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\utils\\axiosHeaders.js":"11","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\store.js":"12","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\userReducer.js":"13","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\orderReducer.js":"14","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\messages.js":"15","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\user.js":"16","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Logging\\SnackBars\\SuccessSnackbar.js":"17","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\LogRegModal.js":"18","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Order\\OrderMainPage.js":"19","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\NotUsing\\users\\AllUsersPage.js":"20","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateItemForm.js":"21","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Products\\SingleItemPage.js":"22","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\MainPage.js":"23","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Choices\\SingleChoicePage.js":"24","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\AdminMainPage.js":"25","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateCategoryForm.js":"26","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateChoiceForm.js":"27","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateIngredientForm.js":"28","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreatePage.js":"29","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Home\\HomePage.js":"30","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Order\\PreCompleteOrderPage.js":"31","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserAddress.js":"32","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\AddressModal.js":"33","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserOrders.js":"34","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Choices\\ChoicesComponent.js":"35","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Ingredients\\IngredientsComponent.js":"36","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Ingredients\\SingleIngredientPage.js":"37","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Products\\ItemsComponent.js":"38","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\ItemsPage.js":"39","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\OrderItemModal.js":"40","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\EditAddressModal.js":"41","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserRatings.js":"42","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Common\\TextPage.js":"43","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Layout\\Header.js":"44","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Common\\TextData.js":"45","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Logging\\SnackBars\\InfoSnackbar.js":"46","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\errors.js":"47","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateForm.js":"48","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Stats\\StatsPage.js":"49","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateOptionsData.js":"50","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\uiReducer.js":"51","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\Sidebar.js":"52","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reportWebVitals.js":"53","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\webSocketReducer.js":"54","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Common\\PrivateRoute.js":"55","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Layout\\Marker.js":"56","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\index.js":"57","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Logging\\SnackBars\\ErrorSnackbar.js":"58","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Comments\\AllComents.js":"59","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\comments.js":"60","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Common\\tabs.js":"61","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\RightContainer.js":"62","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\InnerSidebarCatalog.js":"63","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\ProductCatalog.js":"64","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\IngredientsCatalog.js":"65","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\CommentsCatalog.js":"66","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\adminReducer.js":"67","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrdersCatalog.js":"68","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrderProductsRow.js":"69","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrderUserDetailsRow.js":"70","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Common\\PrintComponent.js":"71","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\utils\\util.js":"72","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\AdminLogInPage.js":"73","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Common\\AdminRoute.js":"74"},{"size":6179,"mtime":1621760918567,"results":"75","hashOfConfig":"76"},{"size":5748,"mtime":1627675395716,"results":"77","hashOfConfig":"76"},{"size":276,"mtime":1619857868180,"results":"78","hashOfConfig":"76"},{"size":14272,"mtime":1628430749006,"results":"79","hashOfConfig":"76"},{"size":4035,"mtime":1628539221146,"results":"80","hashOfConfig":"76"},{"size":3909,"mtime":1628412807666,"results":"81","hashOfConfig":"76"},{"size":837,"mtime":1620205912836,"results":"82","hashOfConfig":"83"},{"size":792,"mtime":1620545428505,"results":"84","hashOfConfig":"76"},{"size":956,"mtime":1620130056947,"results":"85","hashOfConfig":"76"},{"size":5636,"mtime":1628537321395,"results":"86","hashOfConfig":"76"},{"size":284,"mtime":1621801380065,"results":"87","hashOfConfig":"76"},{"size":1307,"mtime":1620545351865,"results":"88","hashOfConfig":"76"},{"size":3260,"mtime":1628541744754,"results":"89","hashOfConfig":"76"},{"size":1869,"mtime":1620843759207,"results":"90","hashOfConfig":"76"},{"size":1214,"mtime":1620129957998,"results":"91","hashOfConfig":"76"},{"size":11291,"mtime":1628540986728,"results":"92","hashOfConfig":"76"},{"size":1645,"mtime":1618597023368,"results":"93","hashOfConfig":"76"},{"size":9277,"mtime":1621090424495,"results":"94","hashOfConfig":"76"},{"size":29295,"mtime":1627675395727,"results":"95","hashOfConfig":"76"},{"size":402,"mtime":1620130760054,"results":"96","hashOfConfig":"76"},{"size":15218,"mtime":1628414658703,"results":"97","hashOfConfig":"76"},{"size":14872,"mtime":1628431050375,"results":"98","hashOfConfig":"76"},{"size":7166,"mtime":1628454327224,"results":"99","hashOfConfig":"76"},{"size":6318,"mtime":1628429771783,"results":"100","hashOfConfig":"76"},{"size":4872,"mtime":1620843512154,"results":"101","hashOfConfig":"76"},{"size":3315,"mtime":1620131546158,"results":"102","hashOfConfig":"76"},{"size":5816,"mtime":1627675395721,"results":"103","hashOfConfig":"76"},{"size":4087,"mtime":1628339236918,"results":"104","hashOfConfig":"76"},{"size":2008,"mtime":1621058344180,"results":"105","hashOfConfig":"76"},{"size":3347,"mtime":1620462341611,"results":"106","hashOfConfig":"76"},{"size":20556,"mtime":1621714808987,"results":"107","hashOfConfig":"76"},{"size":9591,"mtime":1628541697368,"results":"108","hashOfConfig":"76"},{"size":6837,"mtime":1628540333155,"results":"109","hashOfConfig":"76"},{"size":9376,"mtime":1628540207815,"results":"110","hashOfConfig":"76"},{"size":3636,"mtime":1628429629532,"results":"111","hashOfConfig":"76"},{"size":4049,"mtime":1628429320946,"results":"112","hashOfConfig":"76"},{"size":4632,"mtime":1628430146022,"results":"113","hashOfConfig":"76"},{"size":5658,"mtime":1628429602309,"results":"114","hashOfConfig":"76"},{"size":2127,"mtime":1620132066662,"results":"115","hashOfConfig":"76"},{"size":25429,"mtime":1627675395718,"results":"116","hashOfConfig":"76"},{"size":8821,"mtime":1628541119326,"results":"117","hashOfConfig":"76"},{"size":2074,"mtime":1621937475031,"results":"118","hashOfConfig":"76"},{"size":580,"mtime":1620387584070,"results":"119","hashOfConfig":"76"},{"size":6849,"mtime":1621936910299,"results":"120","hashOfConfig":"76"},{"size":102,"mtime":1620387582137,"results":"121","hashOfConfig":"76"},{"size":1627,"mtime":1618597043608,"results":"122","hashOfConfig":"76"},{"size":846,"mtime":1618596459282,"results":"123","hashOfConfig":"76"},{"size":1282,"mtime":1620130596117,"results":"124","hashOfConfig":"76"},{"size":2680,"mtime":1620201783837,"results":"125","hashOfConfig":"76"},{"size":200,"mtime":1620130596846,"results":"126","hashOfConfig":"76"},{"size":1133,"mtime":1618256485899,"results":"127","hashOfConfig":"76"},{"size":2948,"mtime":1621764433755,"results":"128","hashOfConfig":"76"},{"size":362,"mtime":1609944825456,"results":"129","hashOfConfig":"76"},{"size":596,"mtime":1619366536780,"results":"130","hashOfConfig":"76"},{"size":536,"mtime":1620130549028,"results":"131","hashOfConfig":"76"},{"size":651,"mtime":1620130925642,"results":"132","hashOfConfig":"76"},{"size":546,"mtime":1620588243144,"results":"133","hashOfConfig":"76"},{"size":1456,"mtime":1618597051768,"results":"134","hashOfConfig":"76"},{"size":3719,"mtime":1621085057851,"results":"135","hashOfConfig":"76"},{"size":2553,"mtime":1627675395706,"results":"136","hashOfConfig":"76"},{"size":321,"mtime":1621073880729,"results":"137","hashOfConfig":"76"},{"size":3900,"mtime":1621073960194,"results":"138","hashOfConfig":"76"},{"size":2457,"mtime":1621764484696,"results":"139","hashOfConfig":"76"},{"size":2162,"mtime":1620593334902,"results":"140","hashOfConfig":"76"},{"size":2260,"mtime":1620593233938,"results":"141","hashOfConfig":"76"},{"size":5459,"mtime":1621086833593,"results":"142","hashOfConfig":"76"},{"size":4800,"mtime":1621763805135,"results":"143","hashOfConfig":"76"},{"size":4585,"mtime":1620842190277,"results":"144","hashOfConfig":"76"},{"size":3487,"mtime":1621087105386,"results":"145","hashOfConfig":"76"},{"size":6061,"mtime":1621086988310,"results":"146","hashOfConfig":"76"},{"size":7390,"mtime":1621087171251,"results":"147","hashOfConfig":"76"},{"size":282,"mtime":1627675395751,"results":"148","hashOfConfig":"76"},{"size":2983,"mtime":1621763947605,"results":"149","hashOfConfig":"76"},{"size":535,"mtime":1621764670340,"results":"150","hashOfConfig":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},"1hn2an1",{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"153"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rlr1vo",{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"153"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"153"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"153"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"153"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"153"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"153"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Layout\\Footer.js",[],["307","308"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\App.js",["309"],"import React, { Component } from \"react\";\r\n// CSS\r\nimport \"../css/App/App.css\";\r\n// import \"../css/Panel/Sidebar.css\";\r\n\r\n// Routing\r\nimport PrivateRoute from \"./Sections/Common/PrivateRoute\";\r\nimport AdminRoute from \"./Sections/Common/AdminRoute\";\r\nimport {\r\n  Route,\r\n  // BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n// import { createBrowserHistory } from \"history\";\r\n\r\n// Pages\r\n// import UsersPage from \"./Sections/Users/\r\nimport CreatePage from \"./Sections/Create/CreatePage\";\r\nimport StatsPage from \"./Sections/Admin/Stats/StatsPage\";\r\n// import OrdersPage from \"./Sections/Order/OrdersPage\";\r\n\r\nimport ItemsPage from \"./Sections/View/ItemsPage\";\r\nimport HomePage from \"./Sections/Home/HomePage\";\r\nimport AllUsersPage from \"./NotUsing/users/AllUsersPage\";\r\nimport OrderMainPage from \"./Sections/Order/OrderMainPage\";\r\nimport MainPage from \"./Sections/Users/MainPage\";\r\nimport SingleItemPage from \"./Sections/View/Products/SingleItemPage\";\r\nimport PreCompleteOrderPage from \"./Sections/Order/PreCompleteOrderPage\";\r\n\r\n// Layout\r\nimport Header from \"./Layout/Header\";\r\nimport Footer from \"./Layout/Footer\";\r\nimport LogRegModal from \"./Modals/LogRegModal\";\r\n\r\n// Socket.io\r\n// import { connect, sendMsg } from \"../socket\";\r\n\r\n// redux\r\n\r\n// Error/Alerts\r\n// import { Provider as AlertProvider } from \"react-alert\";\r\n// import AlertTemplate from \"react-alert-template-basic\";\r\n\r\n// import { Container } from \"react-bootstrap\";\r\nimport UserOrders from \"./Sections/Users/UserOrders\";\r\nimport UserAddress from \"./Sections/Users/UserAddress\";\r\nimport UserRatings from \"./Sections/Users/UserRatings\";\r\nimport AdminMainPage from \"./Sections/Admin/AdminMainPage\";\r\nimport SingleIngredientPage from \"./Sections/View/Ingredients/SingleIngredientPage\";\r\nimport SuccessSnackbar from \"./Logging/SnackBars/SuccessSnackbar\";\r\nimport InfoSnackbar from \"./Logging/SnackBars/InfoSnackbar\";\r\nimport ErrorSnackbar from \"./Logging/SnackBars/ErrorSnackbar\";\r\nimport NotFound from \"./Layout/NotFound\";\r\nimport SingleChoicePage from \"./Sections/View/Choices/SingleChoicePage\";\r\nimport TextPage from \"./Sections/Common/TextPage\";\r\nimport AllComents from \"./Sections/Admin/Comments/AllComents\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport AdminLogInPage from \"./Sections/Admin/AdminLogInPage\";\r\n// const alertOptions = {\r\n//   timeout: 3000,\r\n//   position: \"top center\",\r\n// };\r\n\r\n// const customHistory = createBrowserHistory();\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      message: \"\",\r\n      showModal: false,\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.showModal = this.showModal.bind(this);\r\n    // this.sendMessage = this.sendMessage.bind(this);\r\n  }\r\n\r\n  showModal = (e) => {\r\n    this.setState({\r\n      showModal: !this.state.showModal,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {}\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <SuccessSnackbar />\r\n        <InfoSnackbar />\r\n        <ErrorSnackbar />\r\n        {/* <Router history={customHistory}> */}\r\n        <Header onClose={this.showModal} />\r\n        <LogRegModal onClose={this.showModal} show={this.state.showModal} />\r\n        {/* <AlertsOverlay /> */}\r\n        <Container id=\"Panel\">\r\n          <Switch>\r\n            {/* {routes.map((route, i) => (\r\n                  <RouteWithSubRoutes key={i} {...route} />\r\n                ))} */}\r\n            {/* PUBLIC ROUTES */}\r\n            <Route path=\"/home\" component={HomePage} />\r\n            <Route path=\"/items\" component={ItemsPage} />\r\n            <Route path=\"/ingredients\" component={ItemsPage} />\r\n            <Route path=\"/choices\" component={ItemsPage} />\r\n            <Route exact path=\"/\">\r\n              <Redirect to=\"/home\" />\r\n            </Route>\r\n            <Route exact path=\"/order\" component={OrderMainPage} />\r\n            <Route path=\"/pre_complete/:id\" component={PreCompleteOrderPage} />\r\n            <Route path=\"/search/:string\" component={OrderMainPage} />\r\n            {/* ADMIN ROUTES */}\r\n            <Route path=\"/admin_login\" component={AdminLogInPage} />\r\n            <Route path=\"/admin\" component={AdminMainPage} />\r\n            {/* <Route path=\"/orders\" component={OrdersPage} /> */}\r\n            {/* <Route path=\"/users\" component={UsersPage} /> */}\r\n\r\n            <Route path=\"/single_item\" component={SingleItemPage} />\r\n            <Route path=\"/single_ingredient\" component={SingleIngredientPage} />\r\n            <Route path=\"/single_choice\" component={SingleChoicePage} />\r\n            <Route path=\"/document/:type\" component={TextPage} />\r\n            <Route path=\"/comments\" component={AllComents} />\r\n            <Route path=\"/stats/:id\" component={StatsPage} />\r\n            <Route path=\"/create_item\" component={CreatePage} />\r\n            <Route path=\"/all_users\" component={AllUsersPage} />\r\n            {/* PRIVATE ROUTES */}\r\n            {/* <Route path=\"/order_menu\" component={OrderMenuPage} /> */}\r\n            <PrivateRoute exact path=\"/account\" component={MainPage} />\r\n            <PrivateRoute exact path=\"/account/orders\" component={UserOrders} />\r\n            <PrivateRoute\r\n              exact\r\n              path=\"/account/addresses\"\r\n              component={UserAddress}\r\n            />\r\n            <PrivateRoute\r\n              exact\r\n              path=\"/account/ratings\"\r\n              component={UserRatings}\r\n            />\r\n            <Route path=\"*\">\r\n              <NotFound />\r\n            </Route>\r\n          </Switch>\r\n        </Container>\r\n        <Footer className=\"footer\" />\r\n        {/* </Router> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Layout\\NotFound.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\items.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\actions.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\productReducer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\socket\\index.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\index.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\snackbar.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\orders.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\utils\\axiosHeaders.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\store.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\userReducer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\orderReducer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\messages.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\user.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Logging\\SnackBars\\SuccessSnackbar.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\LogRegModal.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Order\\OrderMainPage.js",["310"],"import React, { Component } from \"react\";\r\nimport { Card, Col, ListGroup, Row, ThemeProvider } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../../../css/Pages/orderpage.css\";\r\nimport OrderItemModal from \"../../Modals/OrderItemModal\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Redirect } from \"react-router\";\r\nimport { update_cart } from \"../../../actions/orders\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport {\r\n  GetAsyncCategories,\r\n  GetAsyncItems,\r\n  get_items,\r\n  get_categories,\r\n  get_ingredients,\r\n  get_choices,\r\n} from \"../../../actions/items\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport { showInfoSnackbar } from \"../../../actions/snackbar\";\r\n// import AlertModal from \"../../MainPanel/Pages/Alert/AlertModal\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  createMuiTheme,\r\n  Drawer,\r\n  Grid,\r\n  Hidden,\r\n  IconButton,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { orange } from \"@material-ui/core/colors\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nvar _ = require(\"lodash\");\r\n\r\nconst customTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: orange[500],\r\n    },\r\n  },\r\n});\r\n\r\nclass OrderMainPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addToCart = this.addToCart.bind(this);\r\n    this.removeFromCart = this.removeFromCart.bind(this);\r\n    this.clearCart = this.clearCart.bind(this);\r\n    this.changeCategory = this.changeCategory.bind(this);\r\n    this.showModal = this.showModal.bind(this);\r\n    this.showAlert = this.showAlert.bind(this);\r\n    this.toggleDrawer = this.toggleDrawer.bind(this);\r\n  }\r\n  state = {\r\n    cart: [],\r\n    totalPrice: 0,\r\n    grouped: [],\r\n    selectedCategory: \"1\",\r\n    selectedItem: {},\r\n    itemToUpdate: {},\r\n    showModal: false,\r\n    modalToUpdate: false,\r\n    indexToUpdate: 0,\r\n    pathToImages: \"\",\r\n    showAlert: false,\r\n    alertMessage: \"\",\r\n    continueOrder: false,\r\n    products: [],\r\n    categories: [],\r\n    isReady: false,\r\n    openDrawer: false,\r\n  };\r\n  static propTypes = {\r\n    orderReducer: PropTypes.object.isRequired,\r\n    userReducer: PropTypes.object.isRequired,\r\n    products: PropTypes.array.isRequired,\r\n    categories: PropTypes.array.isRequired,\r\n    isReady: PropTypes.bool.isRequired,\r\n    update_cart: PropTypes.func.isRequired,\r\n    showInfoSnackbar: PropTypes.func.isRequired,\r\n    GetAsyncCategories: PropTypes.func.isRequired,\r\n    GetAsyncItems: PropTypes.func.isRequired,\r\n    get_items: PropTypes.func.isRequired,\r\n    get_categories: PropTypes.func.isRequired,\r\n    get_ingredients: PropTypes.func.isRequired,\r\n    get_choices: PropTypes.func.isRequired,\r\n  };\r\n  changeCategory = (category, drawer) => {\r\n    this.setState({ selectedCategory: category });\r\n    if (drawer) {\r\n      this.setState({ openDrawer: false });\r\n    }\r\n  };\r\n\r\n  continueOrder = () => {\r\n    if (this.state.cart.length > 0) {\r\n      if (sessionStorage.getItem(\"isAuthenticated\") !== \"true\") {\r\n        // this.showAlert(true, \"You have to login first!\");\r\n        this.props.showInfoSnackbar(\"You have to login first!\");\r\n      } else {\r\n        this.setState({\r\n          continueOrder: true,\r\n        });\r\n      }\r\n    } else {\r\n      // return <Alert variant=\"secondary\">Your card is empty!</Alert>;\r\n      this.props.showInfoSnackbar(\"Your cart is empty!\");\r\n    }\r\n  };\r\n\r\n  updateCart = (item, quantity, index) => {\r\n    // console.log(item, quantity);\r\n    const order_item = {\r\n      item: item.item,\r\n      options: item.options,\r\n      comment: item.comment,\r\n      totalPrice: item.item.price * quantity + item.extraPrice * quantity,\r\n      optionAnswers: item.optionAnswers,\r\n      extra_ingredients: item.extra_ingredients,\r\n      quantity: quantity,\r\n    };\r\n    let cart_ = this.state.cart;\r\n    let oldTotalPrice = this.state.totalPrice;\r\n    let newTotalPrice =\r\n      oldTotalPrice - cart_[index].totalPrice + order_item.totalPrice;\r\n    cart_[index] = order_item;\r\n    this.setState({\r\n      cart: cart_,\r\n      totalPrice: newTotalPrice,\r\n    });\r\n    // this.props.update_order(this.state.cart, this.state.totalPrice);\r\n  };\r\n\r\n  addToCart = (item, quantity) => {\r\n    const order_item = {\r\n      item: item.item,\r\n      options: item.options,\r\n      comment: item.comment,\r\n      extraPrice: item.extraPrice,\r\n      totalPrice: item.item.price * quantity + item.extraPrice * quantity,\r\n      optionAnswers: item.optionAnswers,\r\n      extra_ingredients: item.extra_ingredients,\r\n      quantity: quantity,\r\n    };\r\n    this.setState({\r\n      cart: [...this.state.cart, order_item],\r\n      totalPrice: this.state.totalPrice + order_item.totalPrice,\r\n    });\r\n    // this.props.update_order(this.state.cart, this.state.totalPrice);\r\n  };\r\n\r\n  removeFromCart = (index, order_item) => {\r\n    console.log(order_item);\r\n    this.setState({\r\n      cart: [...this.state.cart.filter((item, idex) => idex !== index)],\r\n      totalPrice: this.state.totalPrice - order_item.totalPrice,\r\n    });\r\n    // this.props.update_order(this.state.cart, this.state.totalPrice);\r\n  };\r\n\r\n  clearCart() {\r\n    this.setState({ cart: [], totalPrice: 0 });\r\n    // this.props.update_order(this.state.cart, this.state.totalPrice);\r\n  }\r\n\r\n  showModal = (item, bool, close, index) => {\r\n    let item_ = {};\r\n    let cat_ = \"\";\r\n    if (bool) {\r\n      item_ = item.item;\r\n    } else {\r\n      item_ = item;\r\n    }\r\n    if (close) {\r\n      cat_ = this.state.selectedCategory;\r\n    } else {\r\n      cat_ = item_.category;\r\n    }\r\n    this.setState({\r\n      selectedItem: item_,\r\n      selectedCategory: cat_,\r\n      showModal: !this.state.showModal,\r\n      modalToUpdate: bool,\r\n      indexToUpdate: index,\r\n      itemToUpdate: item,\r\n    });\r\n  };\r\n\r\n  toggleDrawer = (bool) => {\r\n    this.setState({ openDrawer: bool });\r\n  };\r\n\r\n  changeQuantity = (bool, index) => {\r\n    let cur_cart = [...this.state.cart];\r\n    let cur_item = cur_cart[index];\r\n    let price_per_unit = cur_item.totalPrice / cur_item.quantity;\r\n    let cartTotalPrice = this.state.totalPrice;\r\n\r\n    if (bool) {\r\n      cur_item.totalPrice += price_per_unit;\r\n      cur_item.quantity += 1;\r\n      cartTotalPrice += price_per_unit;\r\n    } else {\r\n      cur_item.totalPrice -= price_per_unit;\r\n      cur_item.quantity -= 1;\r\n      cartTotalPrice -= price_per_unit;\r\n    }\r\n    cur_cart[index] = cur_item;\r\n    console.log(cur_item);\r\n    if (cur_item.quantity === 0) {\r\n      cur_item.quantity += 1;\r\n      cur_item.totalPrice += price_per_unit;\r\n      this.removeFromCart(index, cur_item);\r\n    } else {\r\n      this.setState({\r\n        cart: cur_cart,\r\n        totalPrice: cartTotalPrice,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.props.update_cart(this.state.cart, this.state.totalPrice);\r\n  }\r\n  showAlert = (bool, msg) => {\r\n    this.setState({\r\n      showAlert: bool,\r\n      alertMessage: msg,\r\n    });\r\n  };\r\n\r\n  showSearchResults = (e) => {\r\n    let type = e.type;\r\n    // console.log(e.target.value);\r\n    // console.log(e.target.textContent);\r\n    if (type === \"click\" || type === \"keydown\") {\r\n      let name = e.target.textContent;\r\n      if (type === \"keydown\") {\r\n        name = e.target.value;\r\n      }\r\n      let product;\r\n      let found = false;\r\n      for (var i in this.props.products) {\r\n        if (this.props.products[i].name === name) {\r\n          product = this.props.products[i];\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n      if (found)\r\n        this.setState(\r\n          {\r\n            selectedCategory: product.category,\r\n          },\r\n          () => {\r\n            // console.log(this.state.selectedCategory);\r\n          }\r\n        );\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.isReady) {\r\n      this.props.get_items();\r\n      this.props.get_categories();\r\n      this.props.get_ingredients();\r\n      this.props.get_choices();\r\n    }\r\n    if (this.props.orderReducer.products.length > 0) {\r\n      let grouped = _.groupBy(this.props.products, \"category\");\r\n      let category = this.props.categories[0].name;\r\n      if (this.state.searchParam !== \"\") {\r\n        for (var i in this.props.products) {\r\n          if (this.props.products[i].name === this.state.searchParam) {\r\n            category = this.props.products[i].categroy;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.setState({\r\n        selectedCategory: category,\r\n        grouped: grouped,\r\n        cart: this.props.orderReducer.products,\r\n        totalPrice: this.props.orderReducer.totalPrice,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let modal;\r\n    let alertModal;\r\n    if (this.state.showModal) {\r\n      modal = (\r\n        <OrderItemModal\r\n          onClose={() =>\r\n            this.showModal(this.state.selectedItem, false, true, 0)\r\n          }\r\n          show={this.state.showModal}\r\n          item={this.state.selectedItem}\r\n          update={this.state.modalToUpdate}\r\n          updateItem={this.state.itemToUpdate}\r\n          category={\r\n            this.props.categories.filter(\r\n              (cat) => cat.name === this.state.selectedCategory\r\n            )[0]\r\n          }\r\n          onAdd={this.addToCart}\r\n          onUpdate={this.updateCart}\r\n          index={this.state.indexToUpdate}\r\n        />\r\n      );\r\n    }\r\n    if (this.state.continueOrder) {\r\n      return (\r\n        <Redirect to={`/pre_complete/${sessionStorage.getItem(\"userID\")}`} />\r\n      );\r\n    }\r\n    if (!this.props.isReady) {\r\n      return (\r\n        <div className=\"loading-div\">\r\n          <CircularProgress disableShrink />{\" \"}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        // <div id=\"orderMainPageContainer\">\r\n        <Container>\r\n          <ThemeProvider theme={customTheme}>\r\n            <Grid spacing={1} container style={{ minHeight: \"70vh\" }}>\r\n              {alertModal}\r\n              {/* <Row className=\"orderMainPageRow\"> */}\r\n              {/* ############## CATEGORIES ################## */}\r\n              <Hidden smUp>\r\n                <Grid item sm={2} xs={2} spacing={2}>\r\n                  <Button\r\n                    style={{\r\n                      justifyContent: \"left\",\r\n                    }}\r\n                    className=\"menu-categories-list-button\"\r\n                    onClick={() => this.toggleDrawer(true)}\r\n                  >\r\n                    <MenuIcon />\r\n                  </Button>\r\n                  <Drawer\r\n                    anchor={\"left\"}\r\n                    open={this.state.openDrawer}\r\n                    onClose={() => this.toggleDrawer(false)}\r\n                  >\r\n                    {this.props.categories.map((categ, index) => {\r\n                      let selected = false;\r\n                      if (this.state.selectedCategory === categ.id) {\r\n                        selected = true;\r\n                      }\r\n                      return (\r\n                        <ListGroup.Item\r\n                          key={index}\r\n                          onClick={() => this.changeCategory(categ.id, true)}\r\n                          active={selected}\r\n                        >\r\n                          {categ.base_category.name}\r\n                        </ListGroup.Item>\r\n                      );\r\n                    })}\r\n                  </Drawer>\r\n                </Grid>\r\n              </Hidden>\r\n              <Hidden mdDown>\r\n                <Grid item lg={3} className=\"categoriesListCol\">\r\n                  <div className=\"categoriesList\">\r\n                    <ListGroup className=\"categoriesListGroup\">\r\n                      {this.props.categories.map((categ, index) => {\r\n                        let selected = false;\r\n                        if (this.state.selectedCategory === categ.id) {\r\n                          selected = true;\r\n                        }\r\n                        return (\r\n                          <ListGroup.Item\r\n                            key={index}\r\n                            onClick={() => this.changeCategory(categ.id, false)}\r\n                            active={selected}\r\n                          >\r\n                            {categ.base_category.name}\r\n                          </ListGroup.Item>\r\n                        );\r\n                      })}\r\n                    </ListGroup>\r\n                  </div>\r\n                </Grid>\r\n              </Hidden>\r\n              {/* ################### PRODUCTS ############### */}\r\n              <Grid\r\n                item\r\n                lg={6}\r\n                md={12}\r\n                sm={10}\r\n                xs={10}\r\n                style={{ width: \"100%\" }}\r\n                className=\"productList\"\r\n              >\r\n                {/* <SearchBar /> */}\r\n                <Autocomplete\r\n                  id=\"search-product\"\r\n                  options={this.props.products}\r\n                  getOptionLabel={(option) => option.base_product.name}\r\n                  // disableClearables={false}\r\n                  autoComplete\r\n                  onClose={(e) => this.showSearchResults(e)}\r\n                  renderOption={(option, index) => (\r\n                    <Typography\r\n                      noWrap\r\n                      // onClick={(e) => console.log(e)}\r\n                      key={index}\r\n                    >\r\n                      {option.base_product.name}\r\n                    </Typography>\r\n                  )}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Search product\"\r\n                      variant=\"outlined\"\r\n                      InputProps={{ ...params.InputProps, type: \"search\" }}\r\n                    />\r\n                  )}\r\n                />\r\n                <ListGroup variant=\"flush\">\r\n                  {this.props.products.map((item, index) => {\r\n                    if (\r\n                      item.base_product.category_id ===\r\n                      this.state.selectedCategory\r\n                    ) {\r\n                      if (item.base_product.available === false) {\r\n                        return (\r\n                          <ListGroup.Item\r\n                            key={index}\r\n                            disabled\r\n                            id={item.base_product.name}\r\n                          >\r\n                            <Card border=\"light\">\r\n                              <Row className=\"itemCardRow\">\r\n                                {item.base_product.image === \"\" ? (\r\n                                  <Col\r\n                                    sm={4}\r\n                                    className=\"itemCardImageCol\"\r\n                                  ></Col>\r\n                                ) : (\r\n                                  <Col sm={4} className=\"itemCardImageCol\">\r\n                                    <Card.Img\r\n                                      // src={`http:://localhost:8080/assets/images/${item.image}`}\r\n                                      src={`http://localhost:8080/assets/images/${item.base_product.image}`}\r\n                                      className=\"itemCardImage\"\r\n                                    ></Card.Img>{\" \"}\r\n                                  </Col>\r\n                                )}\r\n                                <Col sm={8}>\r\n                                  <Card.Body>\r\n                                    <Card.Title className=\"item-unavailable\">\r\n                                      {item.base_product.name}\r\n                                    </Card.Title>\r\n                                    <Card.Subtitle className=\"text-muted\">\r\n                                      {/* {item.description} */}\r\n                                      {item.base_product.default_ingredientes &&\r\n                                      item.base_product.default_ingredientes\r\n                                        .length > 0\r\n                                        ? item.base_product.default_ingredientes.join()\r\n                                        : item.base_product.description}\r\n                                    </Card.Subtitle>\r\n                                    <Card.Text>\r\n                                      {item.base_product.price} €\r\n                                    </Card.Text>\r\n                                  </Card.Body>\r\n                                </Col>\r\n                              </Row>\r\n                            </Card>\r\n                          </ListGroup.Item>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <ListGroup.Item\r\n                            key={index}\r\n                            onClick={() =>\r\n                              this.showModal(item.base_product, false, false, 0)\r\n                            }\r\n                            id={item.base_product.name}\r\n                          >\r\n                            <Card border=\"light\">\r\n                              <Row className=\"itemCardRow\">\r\n                                <Hidden mdDown>\r\n                                  {item.base_product.image === \"\" ? (\r\n                                    <Col\r\n                                      sm={4}\r\n                                      className=\"itemCardImageCol\"\r\n                                    ></Col>\r\n                                  ) : (\r\n                                    <Col sm={4} className=\"itemCardImageCol\">\r\n                                      <Card.Img\r\n                                        src={`http://localhost:8080/assets/images/${item.base_product.image}`}\r\n                                        className=\"itemCardImage\"\r\n                                      ></Card.Img>{\" \"}\r\n                                    </Col>\r\n                                  )}\r\n                                </Hidden>\r\n                                <Col sm={8}>\r\n                                  <Card.Body>\r\n                                    <Card.Title>\r\n                                      {item.base_product.name}\r\n                                    </Card.Title>\r\n                                    <Card.Subtitle className=\"text-muted\">\r\n                                      {item.base_product.default_ingredients &&\r\n                                      item.base_product.default_ingredients\r\n                                        .length > 0\r\n                                        ? item.base_product.default_ingredients.join()\r\n                                        : item.base_product.description}\r\n                                    </Card.Subtitle>\r\n                                    <Card.Text>\r\n                                      {item.base_product.price} €\r\n                                    </Card.Text>\r\n                                  </Card.Body>\r\n                                </Col>\r\n                              </Row>\r\n                            </Card>\r\n                          </ListGroup.Item>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return <span key={index}></span>;\r\n                    }\r\n                  })}\r\n                </ListGroup>\r\n              </Grid>\r\n              {modal}\r\n              {/* ################### CART ############### */}\r\n              <Grid\r\n                item\r\n                lg={3}\r\n                md={12}\r\n                sm={12}\r\n                xs={12}\r\n                style={{ width: \"100%\" }}\r\n                className=\"cart\"\r\n              >\r\n                <div className=\"stickyCard\">\r\n                  <Card>\r\n                    <Card.Body className=\"cardBody\">\r\n                      <Card.Title>Το καλάθι σου</Card.Title>\r\n                      <div className=\"cartList\">\r\n                        {this.state.cart.length > 0 ? (\r\n                          <ListGroup>\r\n                            {this.state.cart.map((order_item, index) => {\r\n                              // console.log(order_item);\r\n                              return (\r\n                                <ListGroup.Item\r\n                                  key={index}\r\n                                  className=\"cardItem\"\r\n                                >\r\n                                  <Card border=\"light\">\r\n                                    <Card.Header\r\n                                      style={{ backgroundColor: \"white\" }}\r\n                                    >\r\n                                      <Row className=\"headerItem\">\r\n                                        <div\r\n                                          onClick={() =>\r\n                                            this.showModal(\r\n                                              order_item,\r\n                                              true,\r\n                                              false,\r\n                                              index\r\n                                            )\r\n                                          }\r\n                                          className=\"cartItemName\"\r\n                                        >\r\n                                          {order_item.item.name}\r\n                                        </div>\r\n                                        <div className=\"cartItemPrice\">\r\n                                          {order_item.totalPrice /\r\n                                            order_item.quantity}{\" \"}\r\n                                          €\r\n                                        </div>\r\n                                      </Row>\r\n                                    </Card.Header>\r\n                                    <Card.Body>\r\n                                      <Row className=\"bodyItem\">\r\n                                        {order_item.optionAnswers.length > 0 ? (\r\n                                          <div className=\"cartItemOptions\">\r\n                                            <p>\r\n                                              {order_item.optionAnswers.join() +\r\n                                                `,${order_item.comment}`}\r\n                                            </p>\r\n                                          </div>\r\n                                        ) : (\r\n                                          <div className=\"cartItemOptions\">\r\n                                            {order_item.comment}\r\n                                          </div>\r\n                                        )}\r\n                                        <ul className=\"ingredientCartList\">\r\n                                          {order_item.extra_ingredients.length >\r\n                                          0 ? (\r\n                                            order_item.extra_ingredients.map(\r\n                                              (ingredient, index) => {\r\n                                                return (\r\n                                                  <li\r\n                                                    key={index}\r\n                                                    style={{\r\n                                                      textAlign: \"left\",\r\n                                                    }}\r\n                                                  >\r\n                                                    + {ingredient}\r\n                                                  </li>\r\n                                                );\r\n                                              }\r\n                                            )\r\n                                          ) : (\r\n                                            <span></span>\r\n                                          )}\r\n                                        </ul>\r\n                                      </Row>\r\n                                    </Card.Body>\r\n                                    <Card.Footer\r\n                                      style={{ backgroundColor: \"white\" }}\r\n                                    >\r\n                                      <Grid direction=\"row\" container>\r\n                                        <Grid item xs={9}>\r\n                                          <IconButton\r\n                                            className=\"minPlusButton\"\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            aria-label=\"remove\"\r\n                                            onClick={() =>\r\n                                              this.changeQuantity(false, index)\r\n                                            }\r\n                                          >\r\n                                            <RemoveIcon fontSize=\"small\" />\r\n                                          </IconButton>\r\n                                          <span>{order_item.quantity}</span>\r\n                                          <IconButton\r\n                                            className=\"minPlusButton\"\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            aria-label=\"add\"\r\n                                            onClick={() =>\r\n                                              this.changeQuantity(true, index)\r\n                                            }\r\n                                          >\r\n                                            <AddIcon fontSize=\"small\" />\r\n                                          </IconButton>\r\n                                        </Grid>\r\n                                        <Grid item xs={3}>\r\n                                          {/* <div className=\"removeButtonCol\"> */}\r\n                                          <IconButton\r\n                                            className=\"removeButton minPlusButton\"\r\n                                            color=\"secondary\"\r\n                                            variant=\"contained\"\r\n                                            aria-label=\"remove\"\r\n                                            onClick={() =>\r\n                                              this.removeFromCart(\r\n                                                index,\r\n                                                order_item\r\n                                              )\r\n                                            }\r\n                                          >\r\n                                            <ClearIcon fontSize=\"small\" />\r\n                                          </IconButton>\r\n                                          {/* </div> */}\r\n                                        </Grid>\r\n                                      </Grid>\r\n                                    </Card.Footer>\r\n                                  </Card>\r\n                                </ListGroup.Item>\r\n                              );\r\n                            })}\r\n                          </ListGroup>\r\n                        ) : (\r\n                          <Card.Text>Το καλάθι είναι άδειο</Card.Text>\r\n                        )}\r\n                      </div>\r\n                      <hr />\r\n                      <Row>\r\n                        <Col>\r\n                          <Card.Text>Σύνολο</Card.Text>\r\n                        </Col>\r\n                        <Col>\r\n                          <Card.Text> {this.state.totalPrice} €</Card.Text>\r\n                        </Col>\r\n                      </Row>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className=\"cartButton\"\r\n                        onClick={this.continueOrder}\r\n                      >\r\n                        Συνέχεια\r\n                        {/* <Link to=\"/order/pre_complete\">Συνέχεια</Link> */}\r\n                      </Button>\r\n                      <br />\r\n                      <Card.Text\r\n                        style={{\r\n                          textDecoration: \"underline\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={this.clearCart}\r\n                      >\r\n                        Άδειασμα\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </div>\r\n              </Grid>\r\n              {/* </Row> */}\r\n              {/* </div> */}\r\n            </Grid>\r\n          </ThemeProvider>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  console.log(state),\r\n  {\r\n    orderReducer: state.orderReducer,\r\n    products: state.productReducer.products,\r\n    categories: state.productReducer.categories,\r\n    userReducer: state.userReducer,\r\n    isReady: state.productReducer.isReady,\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, {\r\n  update_cart,\r\n  showInfoSnackbar,\r\n  GetAsyncItems,\r\n  GetAsyncCategories,\r\n  get_items,\r\n  get_ingredients,\r\n  get_categories,\r\n  get_choices,\r\n})(OrderMainPage);\r\n","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\NotUsing\\users\\AllUsersPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateItemForm.js",["311"],"import React, { Component } from \"react\";\r\nimport { Form, Button, Container, Image, Col, Row } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { create_product } from \"../../../actions/items\";\r\nimport Resizer from \"react-image-file-resizer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { Collapse, FormControlLabel, ListSubheader } from \"@material-ui/core\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nclass CreateItemForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      price: 0,\r\n      category: \"Kafedes\",\r\n      category_id: 0,\r\n      description: \"\",\r\n      filename: \"Choose product image *\",\r\n      source: \"\",\r\n      image: null,\r\n      extra_ingredients: [\"\"],\r\n      available_ingredients: [\"\"],\r\n      checkedChoices: [-1],\r\n      hasIngredients: false,\r\n      showChoices: false,\r\n      isCustom: false,\r\n      ingredients: [],\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onChangeCheck = this.onChangeCheck.bind(this);\r\n    this.onCustomChange = this.onCustomChange.bind(this);\r\n    this.showChoices = this.showChoices.bind(this);\r\n  }\r\n\r\n  showChoices(e) {\r\n    e.preventDefault();\r\n    this.setState({ showChoices: !this.state.showChoices });\r\n  }\r\n\r\n  static propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    create_product: PropTypes.func.isRequired,\r\n    ingredients: PropTypes.array.isRequired,\r\n    choices: PropTypes.array.isRequired,\r\n    categories: PropTypes.array.isRequired,\r\n    ingredientCategories: PropTypes.array.isRequired,\r\n  };\r\n\r\n  onSubmit(event) {\r\n    event.preventDefault();\r\n    console.log(this.state);\r\n    const item = {\r\n      name: this.state.name,\r\n      description: this.state.description,\r\n      price: parseFloat(this.state.price),\r\n      category_id: parseInt(this.state.category_id),\r\n      default_ingredients: this.state.extra_ingredients.slice(1),\r\n      ingredients_id: this.state.available_ingredients.slice(1),\r\n      choices_id: this.state.checkedChoices.slice(1),\r\n      custom: this.state.isCustom,\r\n      choices: [],\r\n      ingredients: this.state.ingredients,\r\n    };\r\n    for (var i in item.default_ingredients) {\r\n      item.default_ingredients[i] = item.default_ingredients[i].trim();\r\n    }\r\n\r\n    this.props.choices.forEach(function (choice) {\r\n      if (item.choices_id.includes(choice.ID)) {\r\n        item.choices.push(choice);\r\n      }\r\n    });\r\n    // this.props.ingredients.forEach(function (ingredient) {\r\n    //   console.log(item.ingredients_id.includes(ingredient.ID));\r\n    //   if (item.ingredients_id.includes(ingredient.ID)) {\r\n    //     item.ingredients.push(ingredient);\r\n    //   }\r\n    // });\r\n    // console.log(this.props);\r\n    // console.log(item.ingredients);\r\n    const image = this.state.image;\r\n    console.log(item);\r\n    this.props.create_product(item, image);\r\n    this.setState({\r\n      name: \"\",\r\n      price: 0,\r\n      category: \"Kafedes\",\r\n      description: \"\",\r\n      filename: \"Choose product image *\",\r\n      source: \"\",\r\n      image: null,\r\n      extra_ingredients: [\"\"],\r\n      checkedChoices: [-1],\r\n      hasIngredients: false,\r\n      showChoices: false,\r\n      isCustom: false,\r\n      choices: [],\r\n    });\r\n  }\r\n\r\n  handleToggle = (value) => {\r\n    const currentIndex = this.state.extra_ingredients.indexOf(value);\r\n    const newChecked = [...this.state.extra_ingredients];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    this.setState({\r\n      extra_ingredients: newChecked,\r\n    });\r\n  };\r\n\r\n  handleAvailableToggle = (value) => {\r\n    const currentIndex = this.state.available_ingredients.indexOf(value.ID);\r\n    const newChecked = [...this.state.available_ingredients];\r\n    const newIngredients = [...this.state.ingredients];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value.ID);\r\n      newIngredients.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n      newIngredients.splice(currentIndex, 1);\r\n    }\r\n\r\n    this.setState({\r\n      available_ingredients: newChecked,\r\n      ingredients: newIngredients,\r\n    });\r\n  };\r\n\r\n  handleChoiceToggle = (choice) => {\r\n    const currentIndex = this.state.checkedChoices.indexOf(choice);\r\n    const newChecked = [...this.state.checkedChoices];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(choice);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    this.setState({\r\n      checkedChoices: newChecked,\r\n    });\r\n    console.log(newChecked);\r\n  };\r\n\r\n  onChangeCheck() {\r\n    this.setState({ hasIngredients: !this.state.hasIngredients });\r\n    if (document.getElementById(\"ingredient-list\").style.display === \"block\") {\r\n      document.getElementById(\"ingredient-list\").style.display = \"none\";\r\n    } else {\r\n      document.getElementById(\"ingredient-list\").style.display = \"block\";\r\n    }\r\n  }\r\n\r\n  onCustomChange() {\r\n    this.setState({ isCustom: !this.state.isCustom });\r\n    if (\r\n      document.getElementById(\"available-ingredient-list\").style.display ===\r\n      \"block\"\r\n    ) {\r\n      document.getElementById(\"available-ingredient-list\").style.display =\r\n        \"none\";\r\n    } else {\r\n      document.getElementById(\"available-ingredient-list\").style.display =\r\n        \"block\";\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  onFileChange = (e) => {\r\n    // console.log(e.target.files);\r\n    try {\r\n      Resizer.imageFileResizer(\r\n        e.target.files[0],\r\n        300,\r\n        300,\r\n        \"JPEG\",\r\n        100,\r\n        0,\r\n        (uri) => {\r\n          this.setState({\r\n            source: uri,\r\n          });\r\n        },\r\n        \"base64\",\r\n        200,\r\n        200\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n    this.setState({\r\n      image: e.target.files[0],\r\n      filename: e.target.files[0].name,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    // console.log(this.props.ingredients);\r\n    // console.log(this.state);\r\n    return (\r\n      <Form onSubmit={this.onSubmit}>\r\n        <Form.Group controlId=\"name\">\r\n          <Form.Label>Item Name *</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter name\"\r\n            name=\"name\"\r\n            onChange={this.onChange}\r\n            required\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"description\">\r\n          <Form.Label>Item description</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Enter desc\"\r\n            name=\"description\"\r\n            onChange={this.onChange}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"price\">\r\n          <Form.Label>Item price *</Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            autoComplete=\"false\"\r\n            placeholder=\"Enter price\"\r\n            name=\"price\"\r\n            onChange={this.onChange}\r\n            required\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"category\">\r\n          <Form.Label>Category *</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            name=\"category_id\"\r\n            onChange={this.onChange}\r\n            required\r\n          >\r\n            <option>None</option>\r\n            {this.props.categories.length > 0 ? (\r\n              this.props.categories.map((category, index) => {\r\n                return (\r\n                  <option key={index} value={category.ID}>\r\n                    {category.name.trim()}\r\n                  </option>\r\n                );\r\n              })\r\n            ) : (\r\n              <option key=\"0\">No categories yet</option>\r\n            )}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"choices\">\r\n          <ListItem button onClick={this.showChoices}>\r\n            <ListItemText primary=\"Select choices\" />\r\n            {this.state.showChoices ? <ExpandLess /> : <ExpandMore />}\r\n          </ListItem>\r\n          <Collapse in={this.state.showChoices} timeout=\"auto\" unmountOnExit>\r\n            <List component=\"div\" disablePadding>\r\n              {this.props.choices.map((choice, index) => {\r\n                const labelId = `choice-item-${choice.ID}`;\r\n                return (\r\n                  <ListItem\r\n                    key={index}\r\n                    role={undefined}\r\n                    dense\r\n                    button\r\n                    onClick={() => this.handleChoiceToggle(choice.ID)}\r\n                  >\r\n                    <ListItemIcon>\r\n                      <Checkbox\r\n                        edge=\"start\"\r\n                        checked={\r\n                          this.state.checkedChoices.indexOf(choice.ID) !== -1\r\n                        }\r\n                        tabIndex={-1}\r\n                        disableRipple\r\n                        inputProps={{ \"aria-labelledby\": labelId }}\r\n                      />\r\n                      <ListItemText id={labelId} primary={`${choice.name}`} />\r\n                    </ListItemIcon>\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </Collapse>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"image\">\r\n          <Form.File\r\n            id=\"custom-file\"\r\n            label={this.state.filename}\r\n            custom\r\n            onChange={this.onFileChange}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"customProduct\">\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={this.state.isCustom}\r\n                onChange={this.onCustomChange}\r\n                name=\"isCustom\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"Is product custom?\"\r\n          />\r\n          <List\r\n            style={{ display: \"none\" }}\r\n            className=\"create-item-ingredient-list\"\r\n            id=\"available-ingredient-list\"\r\n            subhead={<li />}\r\n          >\r\n            {this.props.ingredients.map((ingredientCategory, index) => {\r\n              return (\r\n                <li key={index}>\r\n                  <ul>\r\n                    <ListSubheader>{`${this.props.ingredientCategories[index]}`}</ListSubheader>\r\n                    {ingredientCategory.map((ingredient, index) => {\r\n                      const labelId = `ingredient-item-${ingredient.ID}`;\r\n                      return (\r\n                        <ListItem\r\n                          key={index}\r\n                          role={undefined}\r\n                          dense\r\n                          button\r\n                          onClick={() => this.handleAvailableToggle(ingredient)}\r\n                        >\r\n                          <ListItemIcon>\r\n                            <Checkbox\r\n                              edge=\"start\"\r\n                              checked={\r\n                                this.state.available_ingredients.indexOf(\r\n                                  ingredient.ID\r\n                                ) !== -1\r\n                              }\r\n                              tabIndex={-1}\r\n                              disableRipple\r\n                              inputProps={{ \"aria-labelledby\": labelId }}\r\n                            />\r\n                            <ListItemText\r\n                              id={labelId}\r\n                              primary={`${ingredient.name}`}\r\n                            />\r\n                          </ListItemIcon>\r\n                        </ListItem>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </li>\r\n              );\r\n            })}\r\n          </List>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"ingredients\">\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={this.state.hasIngredients}\r\n                onChange={this.onChangeCheck}\r\n                name=\"hasIngredients\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label=\"Has ingredients\"\r\n          />\r\n          <List\r\n            style={{ display: \"none\" }}\r\n            className=\"create-item-ingredient-list\"\r\n            id=\"ingredient-list\"\r\n            subhead={<li />}\r\n          >\r\n            {this.props.ingredients.map((ingredientCategory, index) => {\r\n              return (\r\n                <li key={index}>\r\n                  <ul>\r\n                    <ListSubheader>{`${this.props.ingredientCategories[index]}`}</ListSubheader>\r\n                    {ingredientCategory.map((ingredient, index) => {\r\n                      const labelId = `ingredient-item-${ingredient.name}`;\r\n                      return (\r\n                        <ListItem\r\n                          key={index}\r\n                          role={undefined}\r\n                          dense\r\n                          button\r\n                          onClick={() => this.handleToggle(ingredient.name)}\r\n                        >\r\n                          <ListItemIcon>\r\n                            <Checkbox\r\n                              edge=\"start\"\r\n                              checked={\r\n                                this.state.extra_ingredients.indexOf(\r\n                                  ingredient.name\r\n                                ) !== -1\r\n                              }\r\n                              tabIndex={-1}\r\n                              disableRipple\r\n                              inputProps={{ \"aria-labelledby\": labelId }}\r\n                            />\r\n                            <ListItemText\r\n                              id={labelId}\r\n                              primary={`${ingredient.name}`}\r\n                            />\r\n                          </ListItemIcon>\r\n                        </ListItem>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </li>\r\n              );\r\n            })}\r\n          </List>\r\n        </Form.Group>\r\n        <Container>\r\n          <Row>\r\n            <Col xs={6} md={4}>\r\n              <Image id=\"preview-image\" src={this.state.source} rounded />\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  console.log(state),\r\n  {\r\n    isAuthenticated: state.userReducer.isAuthenticated,\r\n    ingredients: state.productReducer.ingredients,\r\n    ingredientCategories: state.productReducer.ingredientCategories,\r\n    choices: state.productReducer.choices,\r\n    categories: state.productReducer.categories,\r\n  }\r\n);\r\nexport default connect(mapStateToProps, { create_product })(CreateItemForm);\r\n","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Products\\SingleItemPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\MainPage.js",["312"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport \"../../../css/Pages/accountpage.css\";\r\nimport { updateUser, getUser } from \"../../../actions/user\";\r\nimport { Grid, Container } from \"@material-ui/core\";\r\n\r\nclass MainPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      name: \"\",\r\n      surname: \"\",\r\n      phone: \"\",\r\n      newPassword: \"\",\r\n      newPassword2: \"\",\r\n      user: {},\r\n    };\r\n    this.onUpdateSubmit = this.onUpdateSubmit.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onChangePasswordSubmit = this.onChangePasswordSubmit.bind(this);\r\n  }\r\n\r\n  static propTypes = {\r\n    userReducer: PropTypes.object.isRequired,\r\n    updateUser: PropTypes.func.isRequired,\r\n    getUser: PropTypes.func.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.userReducer.isAuthenticated === false) {\r\n      return <Redirect to=\"/home\" />;\r\n    }\r\n    if (this.props.userReducer.hasLoaded === false) {\r\n      this.props.getUser(this.props.userReducer.user.ID);\r\n    }\r\n    console.log(this.props.userReducer);\r\n    this.setState({\r\n      name: this.props.userReducer.user.name,\r\n      surname: this.props.userReducer.user.surname,\r\n      phone: this.props.userReducer.user.phone,\r\n      email: this.props.userReducer.user.email,\r\n      user: this.props.userReducer.user,\r\n    });\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  onChangePasswordSubmit(e) {\r\n    e.preventDefault();\r\n    const data = {\r\n      id: this.state.user.ID,\r\n      password: this.state.newPassword,\r\n      reason: \"change_password\",\r\n    };\r\n    this.props.updateUser(data);\r\n  }\r\n\r\n  onUpdateSubmit(e) {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    const data = {\r\n      id: this.state.user.ID,\r\n      user: {\r\n        name: this.state.name,\r\n        surname: this.state.surname,\r\n        phone: this.state.phone,\r\n      },\r\n      reason: \"update_user\",\r\n    };\r\n    this.props.updateUser(data);\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    if (sessionStorage.getItem(\"isAuthenticated\") === \"false\") {\r\n      return <Redirect to=\"/home\" />;\r\n    } else {\r\n      return (\r\n        <Container className=\"accountMainPage\">\r\n          <Grid spacing={3} container>\r\n            <Grid item lg={3} md={3} sm={6} xs={12}>\r\n              <Link className=\"nav-text nav-text-activated\" to=\"/account\">\r\n                Ο λογαριασμός μου\r\n              </Link>\r\n            </Grid>\r\n            <Grid item lg={3} md={3} sm={6} xs={12}>\r\n              <Link className=\"nav-text\" to=\"/account/orders\">\r\n                Οι παραγγελίες μου\r\n              </Link>\r\n            </Grid>\r\n            <Grid item lg={2} md={2} sm={6} xs={12}>\r\n              <Link className=\"nav-text\" to=\"/account/addresses\">\r\n                Διευθύνσεις\r\n              </Link>\r\n            </Grid>\r\n\r\n            <Grid item lg={2} md={2} sm={6} xs={12}>\r\n              <Link className=\"nav-text\" to=\"/account/ratings\">\r\n                Βαθμολογίες\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n          <Row className=\"userProfileRow bodyRow\">\r\n            <div className=\"roundedContainer userProfileContainer\">\r\n              <h4> Change your values</h4>\r\n              <Form onSubmit={this.onUpdateSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"formGridName\">\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                      onChange={this.onChange}\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      value={this.state.name}\r\n                      placeholder=\"Enter Name\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} controlId=\"formGridLastName\">\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <Form.Control\r\n                      onChange={this.onChange}\r\n                      type=\"text\"\r\n                      name=\"surname\"\r\n                      value={this.state.surname}\r\n                      placeholder=\"Enter Last Name\"\r\n                    />\r\n                  </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control\r\n                      onChange={this.onChange}\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      value={this.state.email}\r\n                      placeholder=\"Enter email\"\r\n                      readOnly\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} controlId=\"formGridPhone\">\r\n                    <Form.Label>Phone</Form.Label>\r\n                    <Form.Control\r\n                      type=\"tel\"\r\n                      placeholder=\"Enter phone: 69xxxxxxxx\"\r\n                      name=\"phone\"\r\n                      pattern=\"69[0-9]{8}\"\r\n                      value={this.state.phone}\r\n                      onChange={this.onChange}\r\n                    />\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  Update\r\n                </Button>\r\n              </Form>\r\n              <h4> Change your password</h4>\r\n              <Form onSubmit={this.onChangePasswordSubmit}>\r\n                <Form.Row>\r\n                  <Form.Group as={Col} controlId=\"formPassword\">\r\n                    <Form.Label>New Password</Form.Label>\r\n                    <Form.Control\r\n                      onChange={this.onChange}\r\n                      type=\"text\"\r\n                      name=\"newPassword\"\r\n                      // value={this.state.newPassword}\r\n                      placeholder=\"Enter Password\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group as={Col} controlId=\"formPassword2\">\r\n                    <Form.Label>Repeat Password</Form.Label>\r\n                    <Form.Control\r\n                      onChange={this.onChange}\r\n                      type=\"text\"\r\n                      name=\"newPassword2\"\r\n                      // value={this.state.newPassword2}\r\n                      placeholder=\"Repeat Password\"\r\n                    />\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                  Update\r\n                </Button>\r\n              </Form>\r\n            </div>\r\n          </Row>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  console.log(state),\r\n  {\r\n    userReducer: state.userReducer,\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, { updateUser, getUser })(MainPage);\r\n","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Choices\\SingleChoicePage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\AdminMainPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateCategoryForm.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateChoiceForm.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateIngredientForm.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreatePage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Home\\HomePage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Order\\PreCompleteOrderPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserAddress.js",["313"],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\AddressModal.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserOrders.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Choices\\ChoicesComponent.js",["314"],"import React, { Component } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport \"../../../../css/Pages/ItemsPage.css\";\r\n// import { Form } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { update_choice } from \"../../../../actions/items\";\r\nimport { PencilFill } from \"react-bootstrap-icons\";\r\n\r\nclass ChoicesComponent extends Component {\r\n  state = {\r\n    selectedChoice: 0,\r\n  };\r\n  changeCategory = (categoryIndex) => {\r\n    console.log(categoryIndex);\r\n    this.setState({ selectedChoice: categoryIndex });\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(this.props.choices);\r\n    if (this.props.choices.length > 0) {\r\n      this.setState({\r\n        selectedChoice: 0,\r\n      });\r\n    }\r\n  }\r\n\r\n  static propTypes = {\r\n    update_choice: PropTypes.func.isRequired,\r\n    choices: PropTypes.array.isRequired,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ItemsComponent\">\r\n        <div className=\"Categoriestable\">\r\n          <ul className=\"Categorylist\">\r\n            {this.props.choices.length > 0\r\n              ? this.props.choices.map((choice, key) => {\r\n                  return (\r\n                    <li\r\n                      key={key}\r\n                      className=\"row\"\r\n                      onClick={() => this.changeCategory(key)}\r\n                    >\r\n                      {\" \"}\r\n                      <div id=\"button\" name=\"selectedCategory\">\r\n                        {choice.name}\r\n                      </div>\r\n                    </li>\r\n                  );\r\n                })\r\n              : null}\r\n          </ul>\r\n        </div>\r\n        <Table bordered striped className=\"Itemstable\">\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Options</th>\r\n              <th>Description</th>\r\n              <th>Required</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.choices.length > 0 ? (\r\n              <tr>\r\n                <td>{this.props.choices[this.state.selectedChoice].name}</td>\r\n                <td>\r\n                  <ul>\r\n                    {this.props.choices[this.state.selectedChoice].options.map(\r\n                      (option, index) => {\r\n                        return (\r\n                          <li key={index}>\r\n                            {option.name} - {option.price}\r\n                          </li>\r\n                        );\r\n                      }\r\n                    )}\r\n                  </ul>\r\n                </td>\r\n                <td>\r\n                  {this.props.choices[this.state.selectedChoice].description}\r\n                </td>\r\n                <td>\r\n                  {this.props.choices[this.state.selectedChoice].required}\r\n                </td>\r\n                <td>\r\n                  <Link\r\n                    to={{\r\n                      pathname: \"/single_choice\",\r\n                      state: {\r\n                        choice: this.props.choices[this.state.selectedChoice],\r\n                      },\r\n                    }}\r\n                  >\r\n                    <PencilFill />\r\n                  </Link>\r\n                </td>\r\n              </tr>\r\n            ) : null}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  console.log(state),\r\n  {\r\n    isAuthenticated: state.userReducer.isAuthenticated,\r\n    choices: state.productReducer.choices,\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, {\r\n  update_choice,\r\n})(ChoicesComponent);\r\n","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Ingredients\\IngredientsComponent.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Ingredients\\SingleIngredientPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\Products\\ItemsComponent.js",["315","316"],"import React, { Component } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport \"../../../../css/Pages/ItemsPage.css\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { send_order } from \"../../../../actions/orders\";\r\nimport {\r\n  update_item,\r\n  change_item_availability,\r\n  update_ingredient,\r\n} from \"../../../../actions/items\";\r\nimport { PencilFill } from \"react-bootstrap-icons\";\r\n\r\nclass ItemsComponent extends Component {\r\n  state = {\r\n    selectedCategory: 0,\r\n    product_ids: [],\r\n    user_id: null,\r\n  };\r\n  changeCategory = (categoryID) => {\r\n    this.setState({ selectedCategory: categoryID });\r\n  };\r\n\r\n  static propTypes = {\r\n    send_order: PropTypes.func.isRequired,\r\n    update_item: PropTypes.func.isRequired,\r\n    change_item_availability: PropTypes.func.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ user_id: this.props.user_Id });\r\n  }\r\n\r\n  changeAvailability(item) {\r\n    console.log(\"here\");\r\n    this.props.change_item_availability(item.ID);\r\n  }\r\n  changeAvailabilityIngredient(item) {\r\n    this.props.update_ingredient(item.ID, item, \"change_availability\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ItemsComponent\">\r\n        <div className=\"Categoriestable\">\r\n          <ul className=\"Categorylist\">\r\n            {this.props.categories.map((category, key) => {\r\n              return (\r\n                <li\r\n                  key={key}\r\n                  className=\"row\"\r\n                  onClick={() => this.changeCategory(category.ID)}\r\n                >\r\n                  {\" \"}\r\n                  <div id=\"button\" name=\"selectedCategory\">\r\n                    {category.name}\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n        <Table bordered striped className=\"Itemstable\">\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Price</th>\r\n              <th>Description</th>\r\n              <th>Available</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.selectedCategory === \"ingredients\"\r\n              ? this.props.ingredients.map((ingredient, index) => {\r\n                  // console.log(ingredient);\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td>{ingredient.name}</td>\r\n                      <td>{ingredient.price}</td>\r\n                      <td>{ingredient.description}</td>\r\n                      {/* <td>{ingredient.category}</td> */}\r\n                      <td>\r\n                        <Form.Check\r\n                          type=\"switch\"\r\n                          defaultChecked={ingredient.available}\r\n                          onChange={() =>\r\n                            this.changeAvailabilityIngredient(ingredient)\r\n                          }\r\n                          id={ingredient.ID}\r\n                          label=\"Available\"\r\n                        />\r\n                      </td>\r\n                      <td>\r\n                        <Link\r\n                          to={{\r\n                            pathname: \"/single_ingredient\",\r\n                            state: {\r\n                              ingredient: ingredient,\r\n                            },\r\n                          }}\r\n                        >\r\n                          <PencilFill />\r\n                        </Link>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n              : this.props.products.map((item, index) => {\r\n                  if (item.category_id === this.state.selectedCategory) {\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{item.name}</td>\r\n                        <td>{item.price}</td>\r\n                        <td>{item.description}</td>\r\n                        <td>\r\n                          <Form.Check\r\n                            type=\"switch\"\r\n                            defaultChecked={item.available}\r\n                            onChange={() => this.changeAvailability(item)}\r\n                            id={item.ID}\r\n                            label=\"Available\"\r\n                          />\r\n                        </td>\r\n                        <td>\r\n                          <Link\r\n                            to={{\r\n                              pathname: \"/single_item\",\r\n                              state: {\r\n                                item: item,\r\n                              },\r\n                            }}\r\n                          >\r\n                            <PencilFill />\r\n                          </Link>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  } else {\r\n                    return <tr key={index}></tr>;\r\n                  }\r\n                })}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => (\r\n  console.log(state.productReducer.categories),\r\n  {\r\n    isAuthenticated: state.userReducer.isAuthenticated,\r\n    // user_id: state.userReducer.user.id,\r\n    categories: state.productReducer.categories,\r\n    products: state.productReducer.products,\r\n    ingredients: state.productReducer.ingredients,\r\n    order_accepted: state.orderReducer.accepted,\r\n    order_sent: state.orderReducer.sent,\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, {\r\n  update_item,\r\n  update_ingredient,\r\n  change_item_availability,\r\n})(ItemsComponent);\r\n","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\View\\ItemsPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\OrderItemModal.js",["317"],"import React, { Component } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"../../css/Pages/orderpage.css\";\r\nimport \"../../css/common/logregmodal.css\";\r\nimport \"../../css/Layout/general.css\";\r\nimport { connect } from \"react-redux\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Checkbox,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Typography,\r\n  Modal,\r\n  Grid,\r\n  Button,\r\n  Paper,\r\n  IconButton,\r\n  Divider,\r\n} from \"@material-ui/core\";\r\nimport { range } from \"lodash\";\r\n\r\nclass OrderItemModal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // options: {},\r\n      options: [],\r\n      choices: [],\r\n      quantity: 1,\r\n      comment: \"\",\r\n      extraPrice: 0,\r\n      item: {},\r\n      extra_ingredients: [\"\"],\r\n      loaded: false,\r\n      item_available_ingredients: [],\r\n    };\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onClose = this.onClose.bind(this);\r\n    this.onAdd = this.onAdd.bind(this);\r\n  }\r\n\r\n  static propTypes = {\r\n    isAuthenticated: PropTypes.bool,\r\n    ingredients: PropTypes.array.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.update) {\r\n      let choices = [];\r\n      console.log(this.props.updateItem.base_product.choices_id);\r\n      for (var i in this.props.choices) {\r\n        if (\r\n          this.props.choices[i].id in\r\n          this.props.updateItem.base_product.choices_id\r\n        ) {\r\n          choices.append(this.props.choices[i]);\r\n        }\r\n      }\r\n      // console.log(this.props);\r\n      this.setState({\r\n        options: this.props.updateItem.options,\r\n        choices: choices,\r\n        quantity: this.props.updateItem.quantity,\r\n        comment: this.props.updateItem.comment,\r\n        extra_ingredients: this.props.updateItem.extra_ingredients,\r\n        extraPrice:\r\n          this.props.updateItem.totalPrice / this.props.updateItem.quantity -\r\n          this.props.updateItem.item.price,\r\n      });\r\n    } else {\r\n      let choices = [];\r\n      console.log(this.props.item);\r\n      for (i in this.props.choices) {\r\n        if (this.props.item.choices_id.includes(this.props.choices[i].id)) {\r\n          choices.push(this.props.choices[i]);\r\n        }\r\n      }\r\n      console.log(choices);\r\n      this.setState({\r\n        choices: choices,\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({\r\n      loaded: false,\r\n    });\r\n  }\r\n\r\n  handleToggle = (ingredient) => {\r\n    const currentIndex = this.state.extra_ingredients.indexOf(ingredient.name);\r\n    const newChecked = [...this.state.extra_ingredients];\r\n    let newPrice = this.state.extraPrice;\r\n\r\n    // console.log(ingredient.name);\r\n    if (currentIndex === -1) {\r\n      newChecked.push(ingredient.name);\r\n      newPrice += ingredient.price;\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n      newPrice -= ingredient.price;\r\n    }\r\n\r\n    this.setState({\r\n      extra_ingredients: newChecked,\r\n      extraPrice: newPrice,\r\n    });\r\n  };\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n  }\r\n\r\n  onAdd(e) {\r\n    e.preventDefault();\r\n    let optionAnswers = [];\r\n    if (this.state.options.length > 0) {\r\n      for (var i in this.state.options) {\r\n        // console.log(i);\r\n        optionAnswers.push(this.state.options[i].choice);\r\n      }\r\n    }\r\n    const item = {\r\n      item: this.props.item,\r\n      options: this.state.options,\r\n      comment: this.state.comment,\r\n      extraPrice: this.state.extraPrice,\r\n      optionAnswers: optionAnswers,\r\n      extra_ingredients: this.state.extra_ingredients.slice(1),\r\n    };\r\n    if (this.props.update) {\r\n      item.extra_ingredients = this.state.extra_ingredients;\r\n    }\r\n    // console.log(item);\r\n    if (this.props.update) {\r\n      this.props.onUpdate &&\r\n        this.props.onUpdate(item, this.state.quantity, this.props.index);\r\n    } else {\r\n      this.props.onAdd && this.props.onAdd(item, this.state.quantity);\r\n    }\r\n    this.props.onClose && this.props.onClose(e);\r\n    this.setState({\r\n      options: {},\r\n      quantity: 1,\r\n      comment: \"\",\r\n      extraPrice: 0,\r\n      extraIngredients: [\"\"],\r\n    });\r\n  }\r\n\r\n  onChangeChoice = (choiceName, selectedOption) => {\r\n    var currentOptions = this.state.options;\r\n    let oldPrice = 0;\r\n    let found = false;\r\n    let exists = false;\r\n    // console.log(choiceName);\r\n    // console.log(selectedOption);\r\n    // Check if choice has already changed once\r\n    for (var id in currentOptions) {\r\n      let old_option = currentOptions[id];\r\n      if (old_option.name === choiceName) {\r\n        if (old_option.choice === selectedOption.name) {\r\n          exists = true;\r\n        }\r\n        oldPrice = old_option.price;\r\n        old_option.choice = selectedOption.name;\r\n        old_option.price = selectedOption.price;\r\n        found = true;\r\n        console.log(\"found\");\r\n      }\r\n    }\r\n    // Else it adds the option\r\n    if (found === false && exists === false) {\r\n      let newOption = {\r\n        name: choiceName,\r\n        choice: selectedOption.name,\r\n        price: selectedOption.price,\r\n      };\r\n      currentOptions.push(newOption);\r\n    }\r\n\r\n    if (exists === false) {\r\n      var newPrice = this.state.extraPrice + selectedOption.price - oldPrice;\r\n      this.setState({\r\n        options: currentOptions,\r\n        extraPrice: newPrice,\r\n      });\r\n    }\r\n    console.log(currentOptions);\r\n  };\r\n\r\n  onChange = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    // console.log(props, state);\r\n    if (\r\n      props.item.custom === true &&\r\n      props.item.extra_ingredients !== undefined &&\r\n      state.loaded === false\r\n    ) {\r\n      let grouped_ingredients = [];\r\n      let grouped;\r\n      var _ = require(\"lodash\");\r\n      grouped = _.groupBy(props.item.extra_ingredients, \"category\");\r\n      for (var i in grouped) {\r\n        grouped_ingredients.push(grouped[i]);\r\n      }\r\n      // console.log(grouped_ingredients);\r\n      return {\r\n        loaded: true,\r\n        item_available_ingredients: grouped_ingredients,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  onClose = (e) => {\r\n    this.props.onClose && this.props.onClose(e);\r\n    this.setState({\r\n      options: {},\r\n      quantity: 1,\r\n      comment: \"\",\r\n      extraPrice: 0,\r\n    });\r\n  };\r\n\r\n  changeQuantity = (bool) => {\r\n    if (bool) {\r\n      this.setState({ quantity: this.state.quantity + 1 });\r\n    } else if (this.state.quantity > 0) {\r\n      this.setState({ quantity: this.state.quantity - 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let text = \"\";\r\n    if (this.props.update) {\r\n      // console.log(\"here to update\");\r\n      text = \"Ενημέρωση\";\r\n    } else {\r\n      // console.log(\"here to add\");\r\n      text = \"Προσθήκη\";\r\n    }\r\n    return (\r\n      <Modal\r\n        open={this.props.show}\r\n        onClose={(e) => {\r\n          this.onClose(e);\r\n        }}\r\n        className=\"log-reg-modal\"\r\n      >\r\n        <Paper elevation={0}>\r\n          <Grid container>\r\n            <Grid item lg={9} md={9} sm={6} xs={6}>\r\n              <Typography>{this.props.item.name}</Typography>\r\n            </Grid>\r\n            {/* <Grid item></Grid> */}\r\n            <Grid item lg={1} md={1} sm={3} xs={3}>\r\n              {/* {item_.price} € */}\r\n              <Typography>\r\n                {this.props.update\r\n                  ? this.state.extraPrice + this.props.updateItem.item.price\r\n                  : this.state.extraPrice + this.props.item.price}{\" \"}\r\n                €\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item lg={2} md={2} sm={3} xs={3}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={(e) => {\r\n                  this.onClose(e);\r\n                }}\r\n              >\r\n                X\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider />\r\n          {/* #################### CHOICES ######################### */}\r\n          <Grid container>\r\n            <Grid item xs={1}></Grid>\r\n            <Grid item xs={10}>\r\n              <Form>\r\n                <Form.Group>\r\n                  {this.state.choices.map((choice, indx) => {\r\n                    choice = choice.base_choice;\r\n                    return (\r\n                      <Paper elevation={0} key={indx}>\r\n                        <Typography className=\"modalChoiceName\">\r\n                          {choice.name}\r\n                          {choice.required ? <span>*</span> : <span></span>}\r\n                        </Typography>\r\n                        <Paper\r\n                          elevation={0}\r\n                          className=\"orderItemModalChoiceDiv\"\r\n                          key={indx}\r\n                        >\r\n                          {choice.options ? (\r\n                            choice.options.map((option, index) => {\r\n                              // if (this.props.update) {\r\n                              let show = false;\r\n                              for (var i in this.props.updateItem.options) {\r\n                                let update_option =\r\n                                  this.props.updateItem.options[i];\r\n                                if (\r\n                                  update_option.name === choice.name &&\r\n                                  update_option.choice === option.name\r\n                                ) {\r\n                                  show = true;\r\n                                }\r\n                              }\r\n                              if (this.props.update && show) {\r\n                                return (\r\n                                  <Grid\r\n                                    item\r\n                                    lg={6}\r\n                                    md={6}\r\n                                    sm={12}\r\n                                    xs={12}\r\n                                    className=\"form-check\"\r\n                                    key={index}\r\n                                  >\r\n                                    <Grid direction=\"row\" container>\r\n                                      <Grid item xs={1}>\r\n                                        <input\r\n                                          className=\"form-check-input\"\r\n                                          type=\"radio\"\r\n                                          name={`${choice.name}`}\r\n                                          value={`${option.name}`}\r\n                                          id={`${option.name}${index}`}\r\n                                          onClick={() =>\r\n                                            this.onChangeChoice(\r\n                                              choice.name,\r\n                                              option\r\n                                            )\r\n                                          }\r\n                                          defaultChecked\r\n                                        />\r\n                                      </Grid>\r\n                                      <Grid item xs={9}>\r\n                                        <label\r\n                                          className=\"form-check-label\"\r\n                                          htmlFor={`${option.name}${index}`}\r\n                                        >\r\n                                          {option.name}\r\n                                        </label>\r\n                                      </Grid>\r\n                                      <Grid item xs={2}>\r\n                                        <span className=\"form-check-price\">\r\n                                          {option.price} €\r\n                                        </span>\r\n                                      </Grid>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                );\r\n                                // }\r\n                              } else {\r\n                                return (\r\n                                  <Grid\r\n                                    item\r\n                                    lg={6}\r\n                                    md={6}\r\n                                    sm={12}\r\n                                    xs={12}\r\n                                    className=\"form-check\"\r\n                                    key={index}\r\n                                  >\r\n                                    <Grid container>\r\n                                      <Grid item xs={1}>\r\n                                        <input\r\n                                          className=\"form-check-input\"\r\n                                          type=\"radio\"\r\n                                          name={`${choice.name}`}\r\n                                          value={`${option.name}`}\r\n                                          id={`${option.name}${index}`}\r\n                                          onClick={() =>\r\n                                            this.onChangeChoice(\r\n                                              choice.name,\r\n                                              option\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                      </Grid>\r\n                                      <Grid item xs={8}>\r\n                                        <label\r\n                                          className=\"form-check-label\"\r\n                                          htmlFor={`${option.name}${index}`}\r\n                                        >\r\n                                          {option.name}\r\n                                        </label>\r\n                                      </Grid>\r\n                                      <Grid item xs={3}>\r\n                                        {\" \"}\r\n                                        <span className=\"form-check-price\">\r\n                                          {option.price} €\r\n                                        </span>\r\n                                      </Grid>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                );\r\n                              }\r\n                            })\r\n                          ) : (\r\n                            <span></span>\r\n                          )}\r\n                        </Paper>\r\n                      </Paper>\r\n                    );\r\n                  })}\r\n                </Form.Group>\r\n                <Form.Group controlId=\"ingrdients\">\r\n                  {this.props.item.custom === true &&\r\n                  this.props.item.extra_ingredients !== undefined ? (\r\n                    <List\r\n                      className=\"create-item-ingredient-list\"\r\n                      id=\"ingredient-list\"\r\n                    >\r\n                      {this.state.item_available_ingredients.map(\r\n                        (ingredientCategory, index) => {\r\n                          return (\r\n                            <Paper elevation={0} key={index}>\r\n                              <p className=\"modalChoiceName\">\r\n                                {`${ingredientCategory[0].category}`}\r\n                              </p>\r\n                              <Paper\r\n                                elevation={0}\r\n                                className=\"orderItemModalIngredientsDiv\"\r\n                                key={index}\r\n                              >\r\n                                {ingredientCategory.map((ingredient, index) => {\r\n                                  const labelId = `ingredient-item-${ingredient.name}`;\r\n                                  if (ingredient.available) {\r\n                                    return (\r\n                                      <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                                        <ListItem\r\n                                          key={index}\r\n                                          role={undefined}\r\n                                          dense\r\n                                          // className=\"item-modal-ingredient-li\"\r\n                                          button\r\n                                          onClick={() =>\r\n                                            this.handleToggle(ingredient)\r\n                                          }\r\n                                        >\r\n                                          <ListItemIcon\r\n                                            style={{ width: \"100%\" }}\r\n                                          >\r\n                                            <Checkbox\r\n                                              edge=\"start\"\r\n                                              checked={\r\n                                                this.state.extra_ingredients.indexOf(\r\n                                                  ingredient.name\r\n                                                ) !== -1\r\n                                              }\r\n                                              tabIndex={-1}\r\n                                              disableRipple\r\n                                              inputProps={{\r\n                                                \"aria-labelledby\": labelId,\r\n                                              }}\r\n                                            />\r\n                                            <ListItemText\r\n                                              id={labelId}\r\n                                              primary={\r\n                                                <Typography\r\n                                                  type=\"body2\"\r\n                                                  style={{\r\n                                                    color: \"black\",\r\n                                                    textAlgin: \"left\",\r\n                                                  }}\r\n                                                >\r\n                                                  {ingredient.name}\r\n                                                </Typography>\r\n                                              }\r\n                                            />\r\n                                            <ListItemText\r\n                                              id={labelId}\r\n                                              primary={\r\n                                                <Typography\r\n                                                  type=\"subtitle1\"\r\n                                                  style={{\r\n                                                    color: \"black\",\r\n                                                    textAlign: \"right\",\r\n                                                  }}\r\n                                                >\r\n                                                  {ingredient.price}€\r\n                                                </Typography>\r\n                                              }\r\n                                            />\r\n                                          </ListItemIcon>\r\n                                        </ListItem>\r\n                                      </Grid>\r\n                                    );\r\n                                  } else {\r\n                                    return (\r\n                                      <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                                        <ListItem\r\n                                          key={index}\r\n                                          role={undefined}\r\n                                          dense\r\n                                          disabled\r\n                                          // className=\"item-modal-ingredient-li\"\r\n                                          // style={{ maxWidth: \"50%\", minWidth: \"50%\" }}\r\n                                          button\r\n                                          onClick={() =>\r\n                                            this.handleToggle(ingredient)\r\n                                          }\r\n                                        >\r\n                                          <ListItemIcon\r\n                                            style={{ width: \"100%\" }}\r\n                                          >\r\n                                            <ListItemText\r\n                                              id={labelId}\r\n                                              primary={\r\n                                                <Typography\r\n                                                  type=\"body2\"\r\n                                                  style={{\r\n                                                    color: \"black\",\r\n                                                    textAlgin: \"center\",\r\n                                                  }}\r\n                                                >\r\n                                                  {ingredient.name}\r\n                                                </Typography>\r\n                                              }\r\n                                            />\r\n                                            <ListItemText\r\n                                              id={labelId}\r\n                                              primary={\r\n                                                <Typography\r\n                                                  type=\"subtitle1\"\r\n                                                  style={{\r\n                                                    color: \"black\",\r\n                                                    textAlign: \"right\",\r\n                                                  }}\r\n                                                >\r\n                                                  {ingredient.price} €\r\n                                                </Typography>\r\n                                              }\r\n                                            />\r\n                                          </ListItemIcon>\r\n                                        </ListItem>\r\n                                      </Grid>\r\n                                    );\r\n                                  }\r\n                                })}\r\n                              </Paper>\r\n                            </Paper>\r\n                          );\r\n                        }\r\n                      )}\r\n                    </List>\r\n                  ) : (\r\n                    <span></span>\r\n                  )}\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label className=\"modalChoiceName\">Comments</Form.Label>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    name=\"comment\"\r\n                    label=\"Leave a comment\"\r\n                    placeholder=\"Leave a comment\"\r\n                    value={this.state.comment}\r\n                    onChange={this.onChange}\r\n                  />\r\n                </Form.Group>\r\n              </Form>\r\n            </Grid>\r\n            <Grid item xs={1}></Grid>\r\n          </Grid>\r\n          <Divider />\r\n          <Grid container style={{ marginTop: \"2\" }}>\r\n            <Grid item lg={1} md={1} sm={12}></Grid>\r\n            <Grid item lg={3} md={3} sm={12} xs={12}>\r\n              <Grid container>\r\n                <Grid item xs={4}>\r\n                  <IconButton\r\n                    // variant=\"outline-danger\"\r\n                    className=\"minPlusButton\"\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    aria-label=\"remove\"\r\n                    onClick={() => this.changeQuantity(false)}\r\n                  >\r\n                    <RemoveIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                  <span>{this.state.quantity}</span>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                  <IconButton\r\n                    // variant=\"outline-success\"\r\n                    className=\"minPlusButton\"\r\n                    color=\"primary\"\r\n                    aria-label=\"add\"\r\n                    // size=\"small\"\r\n                    // variant=\"contained\"\r\n                    onClick={() => this.changeQuantity(true)}\r\n                  >\r\n                    <AddIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item lg={4} md={4} sm={12} xs={12}>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={this.onAdd}\r\n                className=\"modalFooterButton\"\r\n              >\r\n                {text}\r\n              </Button>\r\n            </Grid>\r\n            <Grid xs={4} item></Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) =>\r\n  // console.log(state.productReducer.ingredients),\r\n  ({\r\n    isAuthenticated: state.userReducer.isAuthenticated,\r\n    ingredients: state.productReducer.ingredients,\r\n    choices: state.productReducer.choices,\r\n  });\r\n\r\nexport default connect(mapStateToProps, {})(OrderItemModal);\r\n","D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Modals\\EditAddressModal.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Users\\UserRatings.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Common\\TextPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Layout\\Header.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Common\\TextData.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Logging\\SnackBars\\InfoSnackbar.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\errors.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateForm.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Stats\\StatsPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Create\\CreateOptionsData.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\uiReducer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\Sidebar.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reportWebVitals.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\webSocketReducer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Common\\PrivateRoute.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Layout\\Marker.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\index.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Logging\\SnackBars\\ErrorSnackbar.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Comments\\AllComents.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\actions\\comments.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Common\\tabs.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\RightContainer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\InnerSidebarCatalog.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\ProductCatalog.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\IngredientsCatalog.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Components\\CommentsCatalog.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\reducers\\adminReducer.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrdersCatalog.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrderProductsRow.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Orders\\OrderUserDetailsRow.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\Common\\PrintComponent.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\utils\\util.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Admin\\AdminLogInPage.js",[],"D:\\Go-Projects\\src\\GoProjects\\CoffeeTwist\\admin-panel\\src\\components\\Sections\\Common\\AdminRoute.js",[],{"ruleId":"318","replacedBy":"319"},{"ruleId":"320","replacedBy":"321"},{"ruleId":"322","severity":1,"message":"323","line":8,"column":8,"nodeType":"324","messageId":"325","endLine":8,"endColumn":18},{"ruleId":"326","severity":1,"message":"327","line":725,"column":21,"nodeType":"328","messageId":"329","endLine":725,"endColumn":22},{"ruleId":"326","severity":1,"message":"327","line":452,"column":21,"nodeType":"328","messageId":"329","endLine":452,"endColumn":22},{"ruleId":"326","severity":1,"message":"327","line":206,"column":21,"nodeType":"328","messageId":"329","endLine":206,"endColumn":22},{"ruleId":"326","severity":1,"message":"327","line":280,"column":33,"nodeType":"328","messageId":"329","endLine":280,"endColumn":34},{"ruleId":"326","severity":1,"message":"327","line":112,"column":21,"nodeType":"328","messageId":"329","endLine":112,"endColumn":22},{"ruleId":"322","severity":1,"message":"330","line":8,"column":10,"nodeType":"324","messageId":"325","endLine":8,"endColumn":20},{"ruleId":"326","severity":1,"message":"327","line":153,"column":47,"nodeType":"328","messageId":"329","endLine":153,"endColumn":48},{"ruleId":"322","severity":1,"message":"331","line":24,"column":10,"nodeType":"324","messageId":"325","endLine":24,"endColumn":15},"no-native-reassign",["332"],"no-negated-in-lhs",["333"],"no-unused-vars","'AdminRoute' is defined but never used.","Identifier","unusedVar","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'send_order' is defined but never used.","'range' is defined but never used.","no-global-assign","no-unsafe-negation"]